/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IERC20Template {
  export type FixedRateStruct = { contractAddress: string; id: BytesLike };

  export type FixedRateStructOutput = [string, string] & {
    contractAddress: string;
    id: string;
  };

  export type RolesERC20Struct = { minter: boolean; feeManager: boolean };

  export type RolesERC20StructOutput = [boolean, boolean] & {
    minter: boolean;
    feeManager: boolean;
  };

  export type ProviderFeesStruct = {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    validUntil: BigNumberish;
    providerData: BytesLike;
  };

  export type ProviderFeesStructOutput = [
    string,
    string,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    string
  ] & {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumber;
    v: number;
    r: string;
    s: string;
    validUntil: BigNumber;
    providerData: string;
  };
}

export interface IERC20TemplateInterface extends utils.Interface {
  contractName: "IERC20Template";
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "cap()": FunctionFragment;
    "cleanFrom721()": FunctionFragment;
    "createDispenser(address,uint256,uint256,bool,address)": FunctionFragment;
    "createFixedRate(address,address[],uint256[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "deployPool(uint256[],uint256[],address[])": FunctionFragment;
    "getDispensers()": FunctionFragment;
    "getERC721Address()": FunctionFragment;
    "getFixedRates()": FunctionFragment;
    "getId()": FunctionFragment;
    "getPools()": FunctionFragment;
    "getPublishingMarketFee()": FunctionFragment;
    "initialize(string[],address[],address[],uint256[],bytes[])": FunctionFragment;
    "isERC20Deployer(address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permissions(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "reuseOrder(bytes32,(address,address,uint256,uint8,bytes32,bytes32,uint256,bytes))": FunctionFragment;
    "setPublishingMarketFee(address,address,uint256)": FunctionFragment;
    "startOrder(address,uint256,(address,address,uint256,uint8,bytes32,bytes32,uint256,bytes))": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cleanFrom721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDispenser",
    values: [string, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFixedRate",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispensers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedRates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPublishingMarketFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], string[], string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC20Deployer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "permissions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reuseOrder",
    values: [BytesLike, IERC20Template.ProviderFeesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublishingMarketFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startOrder",
    values: [string, BigNumberish, IERC20Template.ProviderFeesStruct]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanFrom721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispenser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDispensers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublishingMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Deployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reuseOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublishingMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC20Template extends BaseContract {
  contractName: "IERC20Template";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC20TemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    cleanFrom721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDispensers(overrides?: CallOverrides): Promise<[string[]]>;

    getERC721Address(overrides?: CallOverrides): Promise<[string]>;

    getFixedRates(
      overrides?: CallOverrides
    ): Promise<[IERC20Template.FixedRateStructOutput[]]>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    getPools(overrides?: CallOverrides): Promise<[string[]]>;

    getPublishingMarketFee(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isERC20Deployer(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<[IERC20Template.RolesERC20StructOutput]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startOrder(
      consumer: string,
      serviceId: BigNumberish,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  cleanFrom721(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDispenser(
    _dispenser: string,
    maxTokens: BigNumberish,
    maxBalance: BigNumberish,
    withMint: boolean,
    allowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createFixedRate(
    fixedPriceAddress: string,
    addresses: string[],
    uints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deployPool(
    ssParams: BigNumberish[],
    swapFees: BigNumberish[],
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDispensers(overrides?: CallOverrides): Promise<string[]>;

  getERC721Address(overrides?: CallOverrides): Promise<string>;

  getFixedRates(
    overrides?: CallOverrides
  ): Promise<IERC20Template.FixedRateStructOutput[]>;

  getId(overrides?: CallOverrides): Promise<number>;

  getPools(overrides?: CallOverrides): Promise<string[]>;

  getPublishingMarketFee(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  initialize(
    strings_: string[],
    addresses_: string[],
    factoryAddresses_: string[],
    uints_: BigNumberish[],
    bytes_: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isERC20Deployer(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  mint(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  permissions(
    user: string,
    overrides?: CallOverrides
  ): Promise<IERC20Template.RolesERC20StructOutput>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reuseOrder(
    orderTxId: BytesLike,
    _providerFees: IERC20Template.ProviderFeesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublishingMarketFee(
    _publishMarketFeeAddress: string,
    _publishMarketFeeToken: string,
    _publishMarketFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startOrder(
    consumer: string,
    serviceId: BigNumberish,
    _providerFees: IERC20Template.ProviderFeesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    cleanFrom721(overrides?: CallOverrides): Promise<void>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDispensers(overrides?: CallOverrides): Promise<string[]>;

    getERC721Address(overrides?: CallOverrides): Promise<string>;

    getFixedRates(
      overrides?: CallOverrides
    ): Promise<IERC20Template.FixedRateStructOutput[]>;

    getId(overrides?: CallOverrides): Promise<number>;

    getPools(overrides?: CallOverrides): Promise<string[]>;

    getPublishingMarketFee(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC20Deployer(user: string, overrides?: CallOverrides): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<IERC20Template.RolesERC20StructOutput>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startOrder(
      consumer: string,
      serviceId: BigNumberish,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    cleanFrom721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDispensers(overrides?: CallOverrides): Promise<BigNumber>;

    getERC721Address(overrides?: CallOverrides): Promise<BigNumber>;

    getFixedRates(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPublishingMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isERC20Deployer(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permissions(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startOrder(
      consumer: string,
      serviceId: BigNumberish,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cleanFrom721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDispensers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getERC721Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFixedRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublishingMarketFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isERC20Deployer(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startOrder(
      consumer: string,
      serviceId: BigNumberish,
      _providerFees: IERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
