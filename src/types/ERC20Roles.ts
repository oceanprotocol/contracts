/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ERC20Roles {
  export type RolesERC20Struct = { minter: boolean; paymentManager: boolean };

  export type RolesERC20StructOutput = [boolean, boolean] & {
    minter: boolean;
    paymentManager: boolean;
  };
}

export interface ERC20RolesInterface extends utils.Interface {
  contractName: "ERC20Roles";
  functions: {
    "authERC20(uint256)": FunctionFragment;
    "getPermissions(address)": FunctionFragment;
    "permissions(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authERC20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "permissions", values: [string]): string;

  decodeFunctionResult(functionFragment: "authERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;

  events: {
    "AddedMinter(address,address,uint256,uint256)": EventFragment;
    "AddedPaymentManager(address,address,uint256,uint256)": EventFragment;
    "CleanedPermissions(address,uint256,uint256)": EventFragment;
    "RemovedMinter(address,address,uint256,uint256)": EventFragment;
    "RemovedPaymentManager(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedPaymentManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CleanedPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedPaymentManager"): EventFragment;
}

export type AddedMinterEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedMinterEventFilter = TypedEventFilter<AddedMinterEvent>;

export type AddedPaymentManagerEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedPaymentManagerEventFilter =
  TypedEventFilter<AddedPaymentManagerEvent>;

export type CleanedPermissionsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type CleanedPermissionsEventFilter =
  TypedEventFilter<CleanedPermissionsEvent>;

export type RemovedMinterEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedMinterEventFilter = TypedEventFilter<RemovedMinterEvent>;

export type RemovedPaymentManagerEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedPaymentManagerEventFilter =
  TypedEventFilter<RemovedPaymentManagerEvent>;

export interface ERC20Roles extends BaseContract {
  contractName: "ERC20Roles";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20RolesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authERC20(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<[ERC20Roles.RolesERC20StructOutput]>;

    permissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { minter: boolean; paymentManager: boolean }
    >;
  };

  authERC20(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPermissions(
    user: string,
    overrides?: CallOverrides
  ): Promise<ERC20Roles.RolesERC20StructOutput>;

  permissions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { minter: boolean; paymentManager: boolean }>;

  callStatic: {
    authERC20(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<ERC20Roles.RolesERC20StructOutput>;

    permissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { minter: boolean; paymentManager: boolean }
    >;
  };

  filters: {
    "AddedMinter(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedMinterEventFilter;
    AddedMinter(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedMinterEventFilter;

    "AddedPaymentManager(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedPaymentManagerEventFilter;
    AddedPaymentManager(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedPaymentManagerEventFilter;

    "CleanedPermissions(address,uint256,uint256)"(
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): CleanedPermissionsEventFilter;
    CleanedPermissions(
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): CleanedPermissionsEventFilter;

    "RemovedMinter(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedMinterEventFilter;
    RemovedMinter(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedMinterEventFilter;

    "RemovedPaymentManager(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedPaymentManagerEventFilter;
    RemovedPaymentManager(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedPaymentManagerEventFilter;
  };

  estimateGas: {
    authERC20(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissions(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    permissions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authERC20(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
