/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace FactoryRouter {
  export type OperationsStruct = {
    exchangeIds: BytesLike;
    source: string;
    operation: BigNumberish;
    tokenIn: string;
    amountsIn: BigNumberish;
    tokenOut: string;
    amountsOut: BigNumberish;
    maxPrice: BigNumberish;
    swapMarketFee: BigNumberish;
    marketFeeAddress: string;
  };

  export type OperationsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    exchangeIds: string;
    source: string;
    operation: number;
    tokenIn: string;
    amountsIn: BigNumber;
    tokenOut: string;
    amountsOut: BigNumber;
    maxPrice: BigNumber;
    swapMarketFee: BigNumber;
    marketFeeAddress: string;
  };
}

export interface FactoryRouterInterface extends utils.Interface {
  contractName: "FactoryRouter";
  functions: {
    "BONE()": FunctionFragment;
    "BPOW_PRECISION()": FunctionFragment;
    "EXIT_FEE()": FunctionFragment;
    "INIT_POOL_SUPPLY()": FunctionFragment;
    "MAX_BOUND_TOKENS()": FunctionFragment;
    "MAX_BPOW_BASE()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MAX_IN_RATIO()": FunctionFragment;
    "MAX_OUT_RATIO()": FunctionFragment;
    "MAX_TOTAL_WEIGHT()": FunctionFragment;
    "MAX_WEIGHT()": FunctionFragment;
    "MIN_BALANCE()": FunctionFragment;
    "MIN_BOUND_TOKENS()": FunctionFragment;
    "MIN_BPOW_BASE()": FunctionFragment;
    "MIN_FEE()": FunctionFragment;
    "MIN_WEIGHT()": FunctionFragment;
    "addDispenserContract(address)": FunctionFragment;
    "addFactory(address)": FunctionFragment;
    "addFixedRateContract(address)": FunctionFragment;
    "addOceanToken(address)": FunctionFragment;
    "addPoolTemplate(address)": FunctionFragment;
    "addSSContract(address)": FunctionFragment;
    "buyDTBatch((bytes32,address,uint8,address,uint256,address,uint256,uint256,uint256,address)[])": FunctionFragment;
    "changeRouterOwner(address)": FunctionFragment;
    "consumeFee()": FunctionFragment;
    "deployDispenser(address,address,uint256,uint256,address,address)": FunctionFragment;
    "deployFixedRate(address,address[],uint256[])": FunctionFragment;
    "deployPool(address[2],uint256[],uint256[],address[])": FunctionFragment;
    "dispensers(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fixedRate()": FunctionFragment;
    "fixedrates(uint256)": FunctionFragment;
    "getDispensersContracts()": FunctionFragment;
    "getFixedRatesContracts()": FunctionFragment;
    "getMinVestingPeriod()": FunctionFragment;
    "getOPCConsumeFee()": FunctionFragment;
    "getOPCFee(address)": FunctionFragment;
    "getOPCFees()": FunctionFragment;
    "getOPCProviderFee()": FunctionFragment;
    "getOceanTokens()": FunctionFragment;
    "getPoolTemplates()": FunctionFragment;
    "getSSContracts()": FunctionFragment;
    "isDispenserContract(address)": FunctionFragment;
    "isFixedRateContract(address)": FunctionFragment;
    "isOceanToken(address)": FunctionFragment;
    "isPoolTemplate(address)": FunctionFragment;
    "isSSContract(address)": FunctionFragment;
    "minVestingPeriodInBlocks()": FunctionFragment;
    "oceanTokens(uint256)": FunctionFragment;
    "opcCollector()": FunctionFragment;
    "poolTemplates(uint256)": FunctionFragment;
    "providerFee()": FunctionFragment;
    "removeDispenserContract(address)": FunctionFragment;
    "removeFixedRateContract(address)": FunctionFragment;
    "removeOceanToken(address)": FunctionFragment;
    "removePoolTemplate(address)": FunctionFragment;
    "removeSSContract(address)": FunctionFragment;
    "routerOwner()": FunctionFragment;
    "ssContracts(uint256)": FunctionFragment;
    "swapNonOceanFee()": FunctionFragment;
    "swapOceanFee()": FunctionFragment;
    "updateMinVestingPeriod(uint256)": FunctionFragment;
    "updateOPCFee(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BPOW_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXIT_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "INIT_POOL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_IN_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OUT_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDispenserContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addFixedRateContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOceanToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSSContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyDTBatch",
    values: [FactoryRouter.OperationsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployDispenser",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployFixedRate",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [[string, string], BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dispensers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fixedRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fixedrates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispensersContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedRatesContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinVestingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOPCConsumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOPCFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOPCFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOPCProviderFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOceanTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTemplates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSSContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDispenserContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFixedRateContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOceanToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSSContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minVestingPeriodInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oceanTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "opcCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolTemplates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "providerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDispenserContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFixedRateContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOceanToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoolTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSSContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ssContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNonOceanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapOceanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinVestingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOPCFee",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BPOW_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXIT_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INIT_POOL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_IN_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OUT_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDispenserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFixedRateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOceanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSSContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyDTBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consumeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployDispenser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispensers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixedRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixedrates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDispensersContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedRatesContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOPCConsumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOPCFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOPCFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOPCProviderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOceanTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSSContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDispenserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFixedRateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOceanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSSContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVestingPeriodInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oceanTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opcCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDispenserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFixedRateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOceanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoolTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSSContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ssContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNonOceanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOceanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOPCFee",
    data: BytesLike
  ): Result;

  events: {
    "BPoolCreated(address,address,address,address,address,address)": EventFragment;
    "DispenserContractAdded(address,address)": EventFragment;
    "DispenserContractRemoved(address,address)": EventFragment;
    "FactoryContractChanged(address,address)": EventFragment;
    "FixedRateContractAdded(address,address)": EventFragment;
    "FixedRateContractRemoved(address,address)": EventFragment;
    "InstanceDeployed(address)": EventFragment;
    "NewPool(address,bool)": EventFragment;
    "OPCFeeChanged(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PoolTemplateAdded(address,address)": EventFragment;
    "PoolTemplateRemoved(address,address)": EventFragment;
    "RouterChanged(address,address)": EventFragment;
    "SSContractAdded(address,address)": EventFragment;
    "SSContractRemoved(address,address)": EventFragment;
    "TokenAdded(address,address)": EventFragment;
    "TokenRemoved(address,address)": EventFragment;
    "VestingPeriodChanges(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DispenserContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DispenserContractRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryContractChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedRateContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedRateContractRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstanceDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OPCFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTemplateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTemplateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SSContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SSContractRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingPeriodChanges"): EventFragment;
}

export type BPoolCreatedEvent = TypedEvent<
  [string, string, string, string, string, string],
  {
    newBPoolAddress: string;
    registeredBy: string;
    datatokenAddress: string;
    baseTokenAddress: string;
    bpoolTemplateAddress: string;
    ssAddress: string;
  }
>;

export type BPoolCreatedEventFilter = TypedEventFilter<BPoolCreatedEvent>;

export type DispenserContractAddedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type DispenserContractAddedEventFilter =
  TypedEventFilter<DispenserContractAddedEvent>;

export type DispenserContractRemovedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type DispenserContractRemovedEventFilter =
  TypedEventFilter<DispenserContractRemovedEvent>;

export type FactoryContractChangedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type FactoryContractChangedEventFilter =
  TypedEventFilter<FactoryContractChangedEvent>;

export type FixedRateContractAddedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type FixedRateContractAddedEventFilter =
  TypedEventFilter<FixedRateContractAddedEvent>;

export type FixedRateContractRemovedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type FixedRateContractRemovedEventFilter =
  TypedEventFilter<FixedRateContractRemovedEvent>;

export type InstanceDeployedEvent = TypedEvent<[string], { instance: string }>;

export type InstanceDeployedEventFilter =
  TypedEventFilter<InstanceDeployedEvent>;

export type NewPoolEvent = TypedEvent<
  [string, boolean],
  { poolAddress: string; isOcean: boolean }
>;

export type NewPoolEventFilter = TypedEventFilter<NewPoolEvent>;

export type OPCFeeChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    newSwapOceanFee: BigNumber;
    newSwapNonOceanFee: BigNumber;
    newConsumeFee: BigNumber;
    newProviderFee: BigNumber;
  }
>;

export type OPCFeeChangedEventFilter = TypedEventFilter<OPCFeeChangedEvent>;

export type PoolTemplateAddedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type PoolTemplateAddedEventFilter =
  TypedEventFilter<PoolTemplateAddedEvent>;

export type PoolTemplateRemovedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type PoolTemplateRemovedEventFilter =
  TypedEventFilter<PoolTemplateRemovedEvent>;

export type RouterChangedEvent = TypedEvent<
  [string, string],
  { caller: string; newRouter: string }
>;

export type RouterChangedEventFilter = TypedEventFilter<RouterChangedEvent>;

export type SSContractAddedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type SSContractAddedEventFilter = TypedEventFilter<SSContractAddedEvent>;

export type SSContractRemovedEvent = TypedEvent<
  [string, string],
  { caller: string; contractAddress: string }
>;

export type SSContractRemovedEventFilter =
  TypedEventFilter<SSContractRemovedEvent>;

export type TokenAddedEvent = TypedEvent<
  [string, string],
  { caller: string; token: string }
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export type TokenRemovedEvent = TypedEvent<
  [string, string],
  { caller: string; token: string }
>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export type VestingPeriodChangesEvent = TypedEvent<
  [string, BigNumber],
  { caller: string; minVestingPeriodInBlocks: BigNumber }
>;

export type VestingPeriodChangesEventFilter =
  TypedEventFilter<VestingPeriodChangesEvent>;

export interface FactoryRouter extends BaseContract {
  contractName: "FactoryRouter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXIT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDispenserContract(
      _dispenser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFixedRateContract(
      _fixedRate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOceanToken(
      oceanTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPoolTemplate(
      poolTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSSContract(
      _ssContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDTBatch(
      _operations: FactoryRouter.OperationsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRouterOwner(
      _routerOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    consumeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispensers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fixedRate(overrides?: CallOverrides): Promise<[string]>;

    fixedrates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDispensersContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getFixedRatesContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getMinVestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOPCFee(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOPCFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOceanTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolTemplates(overrides?: CallOverrides): Promise<[string[]]>;

    getSSContracts(overrides?: CallOverrides): Promise<[string[]]>;

    isDispenserContract(
      _dispenser: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFixedRateContract(
      _fixedRate: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOceanToken(
      oceanTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolTemplate(
      poolTemplate: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSSContract(
      _ssContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minVestingPeriodInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    oceanTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    opcCollector(overrides?: CallOverrides): Promise<[string]>;

    poolTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    providerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeDispenserContract(
      _dispenser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFixedRateContract(
      _fixedRate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOceanToken(
      oceanTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePoolTemplate(
      poolTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSSContract(
      _ssContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routerOwner(overrides?: CallOverrides): Promise<[string]>;

    ssContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapNonOceanFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapOceanFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateMinVestingPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOPCFee(
      _newSwapOceanFee: BigNumberish,
      _newSwapNonOceanFee: BigNumberish,
      _newConsumeFee: BigNumberish,
      _newProviderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BONE(overrides?: CallOverrides): Promise<BigNumber>;

  BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  addDispenserContract(
    _dispenser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFixedRateContract(
    _fixedRate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOceanToken(
    oceanTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPoolTemplate(
    poolTemplate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSSContract(
    _ssContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDTBatch(
    _operations: FactoryRouter.OperationsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRouterOwner(
    _routerOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  consumeFee(overrides?: CallOverrides): Promise<BigNumber>;

  deployDispenser(
    _dispenser: string,
    datatoken: string,
    maxTokens: BigNumberish,
    maxBalance: BigNumberish,
    owner: string,
    allowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployFixedRate(
    fixedPriceAddress: string,
    addresses: string[],
    uints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPool(
    tokens: [string, string],
    ssParams: BigNumberish[],
    swapFees: BigNumberish[],
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispensers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  fixedRate(overrides?: CallOverrides): Promise<string>;

  fixedrates(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getDispensersContracts(overrides?: CallOverrides): Promise<string[]>;

  getFixedRatesContracts(overrides?: CallOverrides): Promise<string[]>;

  getMinVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getOPCConsumeFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOPCFee(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  getOPCFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getOPCProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOceanTokens(overrides?: CallOverrides): Promise<string[]>;

  getPoolTemplates(overrides?: CallOverrides): Promise<string[]>;

  getSSContracts(overrides?: CallOverrides): Promise<string[]>;

  isDispenserContract(
    _dispenser: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFixedRateContract(
    _fixedRate: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOceanToken(
    oceanTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolTemplate(
    poolTemplate: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSSContract(
    _ssContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minVestingPeriodInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  oceanTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  opcCollector(overrides?: CallOverrides): Promise<string>;

  poolTemplates(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  providerFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeDispenserContract(
    _dispenser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFixedRateContract(
    _fixedRate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOceanToken(
    oceanTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePoolTemplate(
    poolTemplate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSSContract(
    _ssContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routerOwner(overrides?: CallOverrides): Promise<string>;

  ssContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  swapNonOceanFee(overrides?: CallOverrides): Promise<BigNumber>;

  swapOceanFee(overrides?: CallOverrides): Promise<BigNumber>;

  updateMinVestingPeriod(
    _newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOPCFee(
    _newSwapOceanFee: BigNumberish,
    _newSwapNonOceanFee: BigNumberish,
    _newConsumeFee: BigNumberish,
    _newProviderFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BONE(overrides?: CallOverrides): Promise<BigNumber>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    addDispenserContract(
      _dispenser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    addFixedRateContract(
      _fixedRate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOceanToken(
      oceanTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolTemplate(
      poolTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSSContract(
      _ssContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDTBatch(
      _operations: FactoryRouter.OperationsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeRouterOwner(
      _routerOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    consumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    dispensers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    fixedRate(overrides?: CallOverrides): Promise<string>;

    fixedrates(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getDispensersContracts(overrides?: CallOverrides): Promise<string[]>;

    getFixedRatesContracts(overrides?: CallOverrides): Promise<string[]>;

    getMinVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOceanTokens(overrides?: CallOverrides): Promise<string[]>;

    getPoolTemplates(overrides?: CallOverrides): Promise<string[]>;

    getSSContracts(overrides?: CallOverrides): Promise<string[]>;

    isDispenserContract(
      _dispenser: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFixedRateContract(
      _fixedRate: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOceanToken(
      oceanTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolTemplate(
      poolTemplate: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSSContract(
      _ssContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minVestingPeriodInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    oceanTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    opcCollector(overrides?: CallOverrides): Promise<string>;

    poolTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    providerFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeDispenserContract(
      _dispenser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFixedRateContract(
      _fixedRate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOceanToken(
      oceanTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removePoolTemplate(
      poolTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSSContract(
      _ssContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    routerOwner(overrides?: CallOverrides): Promise<string>;

    ssContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    swapNonOceanFee(overrides?: CallOverrides): Promise<BigNumber>;

    swapOceanFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateMinVestingPeriod(
      _newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOPCFee(
      _newSwapOceanFee: BigNumberish,
      _newSwapNonOceanFee: BigNumberish,
      _newConsumeFee: BigNumberish,
      _newProviderFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BPoolCreated(address,address,address,address,address,address)"(
      newBPoolAddress?: string | null,
      registeredBy?: string | null,
      datatokenAddress?: string | null,
      baseTokenAddress?: null,
      bpoolTemplateAddress?: null,
      ssAddress?: null
    ): BPoolCreatedEventFilter;
    BPoolCreated(
      newBPoolAddress?: string | null,
      registeredBy?: string | null,
      datatokenAddress?: string | null,
      baseTokenAddress?: null,
      bpoolTemplateAddress?: null,
      ssAddress?: null
    ): BPoolCreatedEventFilter;

    "DispenserContractAdded(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): DispenserContractAddedEventFilter;
    DispenserContractAdded(
      caller?: string | null,
      contractAddress?: string | null
    ): DispenserContractAddedEventFilter;

    "DispenserContractRemoved(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): DispenserContractRemovedEventFilter;
    DispenserContractRemoved(
      caller?: string | null,
      contractAddress?: string | null
    ): DispenserContractRemovedEventFilter;

    "FactoryContractChanged(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): FactoryContractChangedEventFilter;
    FactoryContractChanged(
      caller?: string | null,
      contractAddress?: string | null
    ): FactoryContractChangedEventFilter;

    "FixedRateContractAdded(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): FixedRateContractAddedEventFilter;
    FixedRateContractAdded(
      caller?: string | null,
      contractAddress?: string | null
    ): FixedRateContractAddedEventFilter;

    "FixedRateContractRemoved(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): FixedRateContractRemovedEventFilter;
    FixedRateContractRemoved(
      caller?: string | null,
      contractAddress?: string | null
    ): FixedRateContractRemovedEventFilter;

    "InstanceDeployed(address)"(instance?: null): InstanceDeployedEventFilter;
    InstanceDeployed(instance?: null): InstanceDeployedEventFilter;

    "NewPool(address,bool)"(
      poolAddress?: string | null,
      isOcean?: null
    ): NewPoolEventFilter;
    NewPool(poolAddress?: string | null, isOcean?: null): NewPoolEventFilter;

    "OPCFeeChanged(address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      newSwapOceanFee?: null,
      newSwapNonOceanFee?: null,
      newConsumeFee?: null,
      newProviderFee?: null
    ): OPCFeeChangedEventFilter;
    OPCFeeChanged(
      caller?: string | null,
      newSwapOceanFee?: null,
      newSwapNonOceanFee?: null,
      newConsumeFee?: null,
      newProviderFee?: null
    ): OPCFeeChangedEventFilter;

    "PoolTemplateAdded(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): PoolTemplateAddedEventFilter;
    PoolTemplateAdded(
      caller?: string | null,
      contractAddress?: string | null
    ): PoolTemplateAddedEventFilter;

    "PoolTemplateRemoved(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): PoolTemplateRemovedEventFilter;
    PoolTemplateRemoved(
      caller?: string | null,
      contractAddress?: string | null
    ): PoolTemplateRemovedEventFilter;

    "RouterChanged(address,address)"(
      caller?: string | null,
      newRouter?: string | null
    ): RouterChangedEventFilter;
    RouterChanged(
      caller?: string | null,
      newRouter?: string | null
    ): RouterChangedEventFilter;

    "SSContractAdded(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): SSContractAddedEventFilter;
    SSContractAdded(
      caller?: string | null,
      contractAddress?: string | null
    ): SSContractAddedEventFilter;

    "SSContractRemoved(address,address)"(
      caller?: string | null,
      contractAddress?: string | null
    ): SSContractRemovedEventFilter;
    SSContractRemoved(
      caller?: string | null,
      contractAddress?: string | null
    ): SSContractRemovedEventFilter;

    "TokenAdded(address,address)"(
      caller?: string | null,
      token?: string | null
    ): TokenAddedEventFilter;
    TokenAdded(
      caller?: string | null,
      token?: string | null
    ): TokenAddedEventFilter;

    "TokenRemoved(address,address)"(
      caller?: string | null,
      token?: string | null
    ): TokenRemovedEventFilter;
    TokenRemoved(
      caller?: string | null,
      token?: string | null
    ): TokenRemovedEventFilter;

    "VestingPeriodChanges(address,uint256)"(
      caller?: string | null,
      minVestingPeriodInBlocks?: null
    ): VestingPeriodChangesEventFilter;
    VestingPeriodChanges(
      caller?: string | null,
      minVestingPeriodInBlocks?: null
    ): VestingPeriodChangesEventFilter;
  };

  estimateGas: {
    BONE(overrides?: CallOverrides): Promise<BigNumber>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    addDispenserContract(
      _dispenser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFixedRateContract(
      _fixedRate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOceanToken(
      oceanTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPoolTemplate(
      poolTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSSContract(
      _ssContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDTBatch(
      _operations: FactoryRouter.OperationsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRouterOwner(
      _routerOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    consumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispensers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fixedRate(overrides?: CallOverrides): Promise<BigNumber>;

    fixedrates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDispensersContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getFixedRatesContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getMinVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFees(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOceanTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTemplates(overrides?: CallOverrides): Promise<BigNumber>;

    getSSContracts(overrides?: CallOverrides): Promise<BigNumber>;

    isDispenserContract(
      _dispenser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFixedRateContract(
      _fixedRate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOceanToken(
      oceanTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolTemplate(
      poolTemplate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSSContract(
      _ssContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVestingPeriodInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    oceanTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    opcCollector(overrides?: CallOverrides): Promise<BigNumber>;

    poolTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeDispenserContract(
      _dispenser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFixedRateContract(
      _fixedRate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOceanToken(
      oceanTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePoolTemplate(
      poolTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSSContract(
      _ssContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routerOwner(overrides?: CallOverrides): Promise<BigNumber>;

    ssContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNonOceanFee(overrides?: CallOverrides): Promise<BigNumber>;

    swapOceanFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateMinVestingPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOPCFee(
      _newSwapOceanFee: BigNumberish,
      _newSwapNonOceanFee: BigNumberish,
      _newConsumeFee: BigNumberish,
      _newProviderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXIT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDispenserContract(
      _dispenser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFixedRateContract(
      _fixedRate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOceanToken(
      oceanTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPoolTemplate(
      poolTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSSContract(
      _ssContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDTBatch(
      _operations: FactoryRouter.OperationsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRouterOwner(
      _routerOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    consumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispensers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixedRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixedrates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDispensersContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedRatesContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinVestingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPCFee(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOPCFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOceanTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTemplates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSSContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDispenserContract(
      _dispenser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFixedRateContract(
      _fixedRate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOceanToken(
      oceanTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolTemplate(
      poolTemplate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSSContract(
      _ssContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVestingPeriodInBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oceanTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    opcCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeDispenserContract(
      _dispenser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFixedRateContract(
      _fixedRate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOceanToken(
      oceanTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePoolTemplate(
      poolTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSSContract(
      _ssContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routerOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ssContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapNonOceanFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapOceanFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMinVestingPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOPCFee(
      _newSwapOceanFee: BigNumberish,
      _newSwapNonOceanFee: BigNumberish,
      _newConsumeFee: BigNumberish,
      _newProviderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
