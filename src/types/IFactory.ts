/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IFactory {
  export type NftCreateDataStruct = {
    name: string;
    symbol: string;
    templateIndex: BigNumberish;
    tokenURI: string;
  };

  export type NftCreateDataStructOutput = [
    string,
    string,
    BigNumber,
    string
  ] & {
    name: string;
    symbol: string;
    templateIndex: BigNumber;
    tokenURI: string;
  };

  export type ErcCreateDataStruct = {
    templateIndex: BigNumberish;
    strings: string[];
    addresses: string[];
    uints: BigNumberish[];
    bytess: BytesLike[];
  };

  export type ErcCreateDataStructOutput = [
    BigNumber,
    string[],
    string[],
    BigNumber[],
    string[]
  ] & {
    templateIndex: BigNumber;
    strings: string[];
    addresses: string[];
    uints: BigNumber[];
    bytess: string[];
  };

  export type DispenserDataStruct = {
    dispenserAddress: string;
    maxTokens: BigNumberish;
    maxBalance: BigNumberish;
    withMint: boolean;
    allowedSwapper: string;
  };

  export type DispenserDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    dispenserAddress: string;
    maxTokens: BigNumber;
    maxBalance: BigNumber;
    withMint: boolean;
    allowedSwapper: string;
  };

  export type FixedDataStruct = {
    fixedPriceAddress: string;
    addresses: string[];
    uints: BigNumberish[];
  };

  export type FixedDataStructOutput = [string, string[], BigNumber[]] & {
    fixedPriceAddress: string;
    addresses: string[];
    uints: BigNumber[];
  };

  export type PoolDataStruct = {
    ssParams: BigNumberish[];
    swapFees: BigNumberish[];
    addresses: string[];
  };

  export type PoolDataStructOutput = [BigNumber[], BigNumber[], string[]] & {
    ssParams: BigNumber[];
    swapFees: BigNumber[];
    addresses: string[];
  };
}

export interface IFactoryInterface extends utils.Interface {
  contractName: "IFactory";
  functions: {
    "addToERC721Registry(address)": FunctionFragment;
    "createNftWithErc20((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]))": FunctionFragment;
    "createNftWithErc20WithDispenser((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]),(address,uint256,uint256,bool,address))": FunctionFragment;
    "createNftWithErc20WithFixedRate((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]),(address,address[],uint256[]))": FunctionFragment;
    "createNftWithErc20WithPool((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]),(uint256[],uint256[],address[]))": FunctionFragment;
    "createToken(uint256,string[],address[],uint256[],bytes[])": FunctionFragment;
    "erc20List(address)": FunctionFragment;
    "erc721List(address)": FunctionFragment;
    "initialize(string,string,address,uint256,string,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToERC721Registry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20",
    values: [IFactory.NftCreateDataStruct, IFactory.ErcCreateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20WithDispenser",
    values: [
      IFactory.NftCreateDataStruct,
      IFactory.ErcCreateDataStruct,
      IFactory.DispenserDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20WithFixedRate",
    values: [
      IFactory.NftCreateDataStruct,
      IFactory.ErcCreateDataStruct,
      IFactory.FixedDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20WithPool",
    values: [
      IFactory.NftCreateDataStruct,
      IFactory.ErcCreateDataStruct,
      IFactory.PoolDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [BigNumberish, string[], string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "erc20List", values: [string]): string;
  encodeFunctionData(functionFragment: "erc721List", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addToERC721Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20WithDispenser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20WithFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20WithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20List", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc721List", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFactory extends BaseContract {
  contractName: "IFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToERC721Registry(
      ERC721address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20WithDispenser(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _DispenserData: IFactory.DispenserDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _FixedData: IFactory.FixedDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20WithPool(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _PoolData: IFactory.PoolDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20List(erc20dt: string, overrides?: CallOverrides): Promise<[boolean]>;

    erc721List(
      ERC721address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _minter: string,
      _cap: BigNumberish,
      blob: string,
      collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;
  };

  addToERC721Registry(
    ERC721address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20(
    _NftCreateData: IFactory.NftCreateDataStruct,
    _ErcCreateData: IFactory.ErcCreateDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20WithDispenser(
    _NftCreateData: IFactory.NftCreateDataStruct,
    _ErcCreateData: IFactory.ErcCreateDataStruct,
    _DispenserData: IFactory.DispenserDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20WithFixedRate(
    _NftCreateData: IFactory.NftCreateDataStruct,
    _ErcCreateData: IFactory.ErcCreateDataStruct,
    _FixedData: IFactory.FixedDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20WithPool(
    _NftCreateData: IFactory.NftCreateDataStruct,
    _ErcCreateData: IFactory.ErcCreateDataStruct,
    _PoolData: IFactory.PoolDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createToken(
    _templateIndex: BigNumberish,
    strings: string[],
    addresses: string[],
    uints: BigNumberish[],
    bytess: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20List(erc20dt: string, overrides?: CallOverrides): Promise<boolean>;

  erc721List(
    ERC721address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _name: string,
    _symbol: string,
    _minter: string,
    _cap: BigNumberish,
    blob: string,
    collector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addToERC721Registry(
      ERC721address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createNftWithErc20(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    createNftWithErc20WithDispenser(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _DispenserData: IFactory.DispenserDataStruct,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _FixedData: IFactory.FixedDataStruct,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    createNftWithErc20WithPool(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _PoolData: IFactory.PoolDataStruct,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    erc20List(erc20dt: string, overrides?: CallOverrides): Promise<boolean>;

    erc721List(
      ERC721address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _name: string,
      _symbol: string,
      _minter: string,
      _cap: BigNumberish,
      blob: string,
      collector: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addToERC721Registry(
      ERC721address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20WithDispenser(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _DispenserData: IFactory.DispenserDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _FixedData: IFactory.FixedDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20WithPool(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _PoolData: IFactory.PoolDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20List(erc20dt: string, overrides?: CallOverrides): Promise<BigNumber>;

    erc721List(
      ERC721address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _minter: string,
      _cap: BigNumberish,
      blob: string,
      collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addToERC721Registry(
      ERC721address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20WithDispenser(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _DispenserData: IFactory.DispenserDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _FixedData: IFactory.FixedDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20WithPool(
      _NftCreateData: IFactory.NftCreateDataStruct,
      _ErcCreateData: IFactory.ErcCreateDataStruct,
      _PoolData: IFactory.PoolDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20List(
      erc20dt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc721List(
      ERC721address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _minter: string,
      _cap: BigNumberish,
      blob: string,
      collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
