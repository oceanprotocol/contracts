/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IDispenserInterface extends utils.Interface {
  contractName: "IDispenser";
  functions: {
    "activate(address,uint256,uint256)": FunctionFragment;
    "create(address,uint256,uint256,address,address)": FunctionFragment;
    "deactivate(address)": FunctionFragment;
    "dispense(address,uint256,address)": FunctionFragment;
    "getId()": FunctionFragment;
    "ownerWithdraw(address)": FunctionFragment;
    "setAllowedSwapper(address,address)": FunctionFragment;
    "status(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "deactivate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dispense",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSwapper",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "status", values: [string]): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispense", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;

  events: {};
}

export interface IDispenser extends BaseContract {
  contractName: "IDispenser";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDispenserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivate(
      datatoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispense(
      datatoken: string,
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    ownerWithdraw(
      datatoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedSwapper(
      datatoken: string,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(
      datatoken: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, boolean, BigNumber, BigNumber, BigNumber] & {
        active: boolean;
        owner: string;
        isMinter: boolean;
        maxTokens: BigNumber;
        maxBalance: BigNumber;
        balance: BigNumber;
      }
    >;
  };

  activate(
    datatoken: string,
    maxTokens: BigNumberish,
    maxBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    datatoken: string,
    maxTokens: BigNumberish,
    maxBalance: BigNumberish,
    owner: string,
    allowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivate(
    datatoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispense(
    datatoken: string,
    amount: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getId(overrides?: CallOverrides): Promise<number>;

  ownerWithdraw(
    datatoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedSwapper(
    datatoken: string,
    newAllowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(
    datatoken: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, boolean, BigNumber, BigNumber, BigNumber] & {
      active: boolean;
      owner: string;
      isMinter: boolean;
      maxTokens: BigNumber;
      maxBalance: BigNumber;
      balance: BigNumber;
    }
  >;

  callStatic: {
    activate(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivate(datatoken: string, overrides?: CallOverrides): Promise<void>;

    dispense(
      datatoken: string,
      amount: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getId(overrides?: CallOverrides): Promise<number>;

    ownerWithdraw(datatoken: string, overrides?: CallOverrides): Promise<void>;

    setAllowedSwapper(
      datatoken: string,
      newAllowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    status(
      datatoken: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, boolean, BigNumber, BigNumber, BigNumber] & {
        active: boolean;
        owner: string;
        isMinter: boolean;
        maxTokens: BigNumber;
        maxBalance: BigNumber;
        balance: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    activate(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivate(
      datatoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispense(
      datatoken: string,
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdraw(
      datatoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedSwapper(
      datatoken: string,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(datatoken: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivate(
      datatoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispense(
      datatoken: string,
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdraw(
      datatoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSwapper(
      datatoken: string,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      datatoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
