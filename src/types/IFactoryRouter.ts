/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IFactoryRouterInterface extends utils.Interface {
  contractName: "IFactoryRouter";
  functions: {
    "deployDispenser(address,address,uint256,uint256,address,address)": FunctionFragment;
    "deployFixedRate(address,address[],uint256[])": FunctionFragment;
    "deployPool(address[2],uint256[],uint256[],address[])": FunctionFragment;
    "getDispensersContracts()": FunctionFragment;
    "getFixedRatesContracts()": FunctionFragment;
    "getMinVestingPeriod()": FunctionFragment;
    "getOPCConsumeFee()": FunctionFragment;
    "getOPCFee(address)": FunctionFragment;
    "getOPCFees()": FunctionFragment;
    "getOPCProviderFee()": FunctionFragment;
    "getOceanTokens()": FunctionFragment;
    "getPoolTemplates()": FunctionFragment;
    "getSSContracts()": FunctionFragment;
    "isDispenserContract(address)": FunctionFragment;
    "isFixedRateContract(address)": FunctionFragment;
    "isOceanToken(address)": FunctionFragment;
    "isPoolTemplate(address)": FunctionFragment;
    "isSSContract(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployDispenser",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployFixedRate",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [[string, string], BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispensersContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedRatesContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinVestingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOPCConsumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOPCFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOPCFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOPCProviderFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOceanTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTemplates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSSContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDispenserContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFixedRateContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOceanToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSSContract",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployDispenser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDispensersContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedRatesContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOPCConsumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOPCFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOPCFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOPCProviderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOceanTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSSContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDispenserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFixedRateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOceanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSSContract",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFactoryRouter extends BaseContract {
  contractName: "IFactoryRouter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFactoryRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDispensersContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getFixedRatesContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getMinVestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOPCFee(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOPCFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOceanTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolTemplates(overrides?: CallOverrides): Promise<[string[]]>;

    getSSContracts(overrides?: CallOverrides): Promise<[string[]]>;

    isDispenserContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFixedRateContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOceanToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPoolTemplate(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSSContract(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  deployDispenser(
    _dispenser: string,
    datatoken: string,
    maxTokens: BigNumberish,
    maxBalance: BigNumberish,
    owner: string,
    allowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployFixedRate(
    fixedPriceAddress: string,
    addresses: string[],
    uints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPool(
    tokens: [string, string],
    ssParams: BigNumberish[],
    swapFees: BigNumberish[],
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDispensersContracts(overrides?: CallOverrides): Promise<string[]>;

  getFixedRatesContracts(overrides?: CallOverrides): Promise<string[]>;

  getMinVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getOPCConsumeFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOPCFee(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  getOPCFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getOPCProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOceanTokens(overrides?: CallOverrides): Promise<string[]>;

  getPoolTemplates(overrides?: CallOverrides): Promise<string[]>;

  getSSContracts(overrides?: CallOverrides): Promise<string[]>;

  isDispenserContract(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFixedRateContract(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOceanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isPoolTemplate(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isSSContract(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDispensersContracts(overrides?: CallOverrides): Promise<string[]>;

    getFixedRatesContracts(overrides?: CallOverrides): Promise<string[]>;

    getMinVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOceanTokens(overrides?: CallOverrides): Promise<string[]>;

    getPoolTemplates(overrides?: CallOverrides): Promise<string[]>;

    getSSContracts(overrides?: CallOverrides): Promise<string[]>;

    isDispenserContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFixedRateContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOceanToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isPoolTemplate(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isSSContract(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDispensersContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getFixedRatesContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getMinVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFees(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOceanTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTemplates(overrides?: CallOverrides): Promise<BigNumber>;

    getSSContracts(overrides?: CallOverrides): Promise<BigNumber>;

    isDispenserContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFixedRateContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOceanToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPoolTemplate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSSContract(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployDispenser(
      _dispenser: string,
      datatoken: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      owner: string,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPool(
      tokens: [string, string],
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDispensersContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedRatesContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinVestingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOPCConsumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPCFee(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOPCFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPCProviderFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOceanTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTemplates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSSContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDispenserContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFixedRateContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOceanToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolTemplate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSSContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
