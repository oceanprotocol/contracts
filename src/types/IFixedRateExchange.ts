/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IFixedRateExchangeInterface extends utils.Interface {
  contractName: "IFixedRateExchange";
  functions: {
    "buyDT(bytes32,uint256,uint256)": FunctionFragment;
    "calcBaseInGivenOutDT(bytes32,uint256)": FunctionFragment;
    "createWithDecimals(address,address[],uint256[])": FunctionFragment;
    "getAllowedSwapper(bytes32)": FunctionFragment;
    "getExchange(bytes32)": FunctionFragment;
    "getFeesInfo(bytes32)": FunctionFragment;
    "getId()": FunctionFragment;
    "isActive(bytes32)": FunctionFragment;
    "sellDT(bytes32,uint256,uint256)": FunctionFragment;
    "setAllowedSwapper(bytes32,address)": FunctionFragment;
    "updateMarketFee(bytes32,uint256)": FunctionFragment;
    "updateMarketFeeCollector(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyDT",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBaseInGivenOutDT",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithDecimals",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedSwapper",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeesInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(functionFragment: "isActive", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sellDT",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSwapper",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFeeCollector",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "buyDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcBaseInGivenOutDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFeeCollector",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFixedRateExchange extends BaseContract {
  contractName: "IFixedRateExchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFixedRateExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseTokenAmount: BigNumber;
        baseTokenAmountBeforeFee: BigNumber;
        oceanFeeAmount: BigNumber;
        marketFeeAmount: BigNumber;
      }
    >;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { allowedSwapper: string }>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        exchangeOwner: string;
        datatoken: string;
        dtDecimals: BigNumber;
        baseToken: string;
        btDecimals: BigNumber;
        fixedRate: BigNumber;
        active: boolean;
        dtSupply: BigNumber;
        btSupply: BigNumber;
        dtBalance: BigNumber;
        btBalance: BigNumber;
        withMint: boolean;
      }
    >;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        marketFee: BigNumber;
        marketFeeCollector: string;
        opcFee: BigNumber;
        marketFeeAvailable: BigNumber;
        oceanFeeAvailable: BigNumber;
      }
    >;

    getId(overrides?: CallOverrides): Promise<[number]>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    maxBaseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcBaseInGivenOutDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseTokenAmount: BigNumber;
      baseTokenAmountBeforeFee: BigNumber;
      oceanFeeAmount: BigNumber;
      marketFeeAmount: BigNumber;
    }
  >;

  createWithDecimals(
    datatoken: string,
    addresses: string[],
    uints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllowedSwapper(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getExchange(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      exchangeOwner: string;
      datatoken: string;
      dtDecimals: BigNumber;
      baseToken: string;
      btDecimals: BigNumber;
      fixedRate: BigNumber;
      active: boolean;
      dtSupply: BigNumber;
      btSupply: BigNumber;
      dtBalance: BigNumber;
      btBalance: BigNumber;
      withMint: boolean;
    }
  >;

  getFeesInfo(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      marketFee: BigNumber;
      marketFeeCollector: string;
      opcFee: BigNumber;
      marketFeeAvailable: BigNumber;
      oceanFeeAvailable: BigNumber;
    }
  >;

  getId(overrides?: CallOverrides): Promise<number>;

  isActive(exchangeId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  sellDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    minBaseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedSwapper(
    exchangeId: BytesLike,
    newAllowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketFee(
    exchangeId: BytesLike,
    _newMarketFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketFeeCollector(
    exchangeId: BytesLike,
    _newMarketCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseTokenAmount: BigNumber;
        baseTokenAmountBeforeFee: BigNumber;
        oceanFeeAmount: BigNumber;
        marketFeeAmount: BigNumber;
      }
    >;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        exchangeOwner: string;
        datatoken: string;
        dtDecimals: BigNumber;
        baseToken: string;
        btDecimals: BigNumber;
        fixedRate: BigNumber;
        active: boolean;
        dtSupply: BigNumber;
        btSupply: BigNumber;
        dtBalance: BigNumber;
        btBalance: BigNumber;
        withMint: boolean;
      }
    >;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        marketFee: BigNumber;
        marketFeeCollector: string;
        opcFee: BigNumber;
        marketFeeAvailable: BigNumber;
        oceanFeeAvailable: BigNumber;
      }
    >;

    getId(overrides?: CallOverrides): Promise<number>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
