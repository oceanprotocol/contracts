/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ERC20Template {
  export type FixedRateStruct = { contractAddress: string; id: BytesLike };

  export type FixedRateStructOutput = [string, string] & {
    contractAddress: string;
    id: string;
  };

  export type ProviderFeesStruct = {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    validUntil: BigNumberish;
    providerData: BytesLike;
  };

  export type ProviderFeesStructOutput = [
    string,
    string,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    string
  ] & {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumber;
    v: number;
    r: string;
    s: string;
    validUntil: BigNumber;
    providerData: string;
  };
}

export declare namespace ERC20Roles {
  export type RolesERC20Struct = { minter: boolean; paymentManager: boolean };

  export type RolesERC20StructOutput = [boolean, boolean] & {
    minter: boolean;
    paymentManager: boolean;
  };
}

export interface ERC20TemplateInterface extends utils.Interface {
  contractName: "ERC20Template";
  functions: {
    "BASE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "addMinter(address)": FunctionFragment;
    "addPaymentManager(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authERC20(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "cap()": FunctionFragment;
    "cleanFrom721()": FunctionFragment;
    "cleanPermissions()": FunctionFragment;
    "createDispenser(address,uint256,uint256,bool,address)": FunctionFragment;
    "createFixedRate(address,address[],uint256[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deployPool(uint256[],uint256[],address[])": FunctionFragment;
    "getDispensers()": FunctionFragment;
    "getERC721Address()": FunctionFragment;
    "getFixedRates()": FunctionFragment;
    "getId()": FunctionFragment;
    "getPaymentCollector()": FunctionFragment;
    "getPermissions(address)": FunctionFragment;
    "getPools()": FunctionFragment;
    "getPublishingMarketFee()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string[],address[],address[],uint256[],bytes[])": FunctionFragment;
    "isERC20Deployer(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permissions(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "removePaymentManager(address)": FunctionFragment;
    "reuseOrder(bytes32,(address,address,uint256,uint8,bytes32,bytes32,uint256,bytes))": FunctionFragment;
    "router()": FunctionFragment;
    "setData(bytes)": FunctionFragment;
    "setPaymentCollector(address)": FunctionFragment;
    "setPublishingMarketFee(address,address,uint256)": FunctionFragment;
    "startOrder(address,uint256,(address,address,uint256,uint8,bytes32,bytes32,uint256,bytes))": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPaymentManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authERC20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cleanFrom721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cleanPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDispenser",
    values: [string, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFixedRate",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispensers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedRates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaymentCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPublishingMarketFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], string[], string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC20Deployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "permissions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePaymentManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reuseOrder",
    values: [BytesLike, ERC20Template.ProviderFeesStruct]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setPaymentCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublishingMarketFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startOrder",
    values: [string, BigNumberish, ERC20Template.ProviderFeesStruct]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPaymentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanFrom721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispenser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDispensers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublishingMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Deployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePaymentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reuseOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublishingMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "AddedMinter(address,address,uint256,uint256)": EventFragment;
    "AddedPaymentManager(address,address,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CleanedPermissions(address,uint256,uint256)": EventFragment;
    "MinterApproved(address,address)": EventFragment;
    "MinterProposed(address,address)": EventFragment;
    "NewDispenser(address)": EventFragment;
    "NewFixedRate(bytes32,address,address,address)": EventFragment;
    "NewPaymentCollector(address,address,uint256,uint256)": EventFragment;
    "NewPool(address,address,address)": EventFragment;
    "OrderReused(bytes32,address,uint256,uint256)": EventFragment;
    "OrderStarted(address,address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "ProviderFees(address,address,uint256,bytes,uint8,bytes32,bytes32,uint256)": EventFragment;
    "PublishMarketFees(address,address,uint256)": EventFragment;
    "PublishMarketFeesChanged(address,address,address,uint256)": EventFragment;
    "RemovedMinter(address,address,uint256,uint256)": EventFragment;
    "RemovedPaymentManager(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedPaymentManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CleanedPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDispenser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFixedRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPaymentCollector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderReused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublishMarketFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublishMarketFeesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedPaymentManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AddedMinterEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedMinterEventFilter = TypedEventFilter<AddedMinterEvent>;

export type AddedPaymentManagerEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedPaymentManagerEventFilter =
  TypedEventFilter<AddedPaymentManagerEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type CleanedPermissionsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type CleanedPermissionsEventFilter =
  TypedEventFilter<CleanedPermissionsEvent>;

export type MinterApprovedEvent = TypedEvent<
  [string, string],
  { currentMinter: string; newMinter: string }
>;

export type MinterApprovedEventFilter = TypedEventFilter<MinterApprovedEvent>;

export type MinterProposedEvent = TypedEvent<
  [string, string],
  { currentMinter: string; newMinter: string }
>;

export type MinterProposedEventFilter = TypedEventFilter<MinterProposedEvent>;

export type NewDispenserEvent = TypedEvent<
  [string],
  { dispenserContract: string }
>;

export type NewDispenserEventFilter = TypedEventFilter<NewDispenserEvent>;

export type NewFixedRateEvent = TypedEvent<
  [string, string, string, string],
  {
    exchangeId: string;
    owner: string;
    exchangeContract: string;
    baseToken: string;
  }
>;

export type NewFixedRateEventFilter = TypedEventFilter<NewFixedRateEvent>;

export type NewPaymentCollectorEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    caller: string;
    _newPaymentCollector: string;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type NewPaymentCollectorEventFilter =
  TypedEventFilter<NewPaymentCollectorEvent>;

export type NewPoolEvent = TypedEvent<
  [string, string, string],
  { poolAddress: string; ssContract: string; baseTokenAddress: string }
>;

export type NewPoolEventFilter = TypedEventFilter<NewPoolEvent>;

export type OrderReusedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { orderTxId: string; caller: string; timestamp: BigNumber; number: BigNumber }
>;

export type OrderReusedEventFilter = TypedEventFilter<OrderReusedEvent>;

export type OrderStartedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
  {
    consumer: string;
    payer: string;
    amount: BigNumber;
    serviceIndex: BigNumber;
    timestamp: BigNumber;
    publishMarketAddress: string;
    blockNumber: BigNumber;
  }
>;

export type OrderStartedEventFilter = TypedEventFilter<OrderStartedEvent>;

export type ProviderFeesEvent = TypedEvent<
  [string, string, BigNumber, string, number, string, string, BigNumber],
  {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumber;
    providerData: string;
    v: number;
    r: string;
    s: string;
    validUntil: BigNumber;
  }
>;

export type ProviderFeesEventFilter = TypedEventFilter<ProviderFeesEvent>;

export type PublishMarketFeesEvent = TypedEvent<
  [string, string, BigNumber],
  {
    PublishMarketFeeAddress: string;
    PublishMarketFeeToken: string;
    PublishMarketFeeAmount: BigNumber;
  }
>;

export type PublishMarketFeesEventFilter =
  TypedEventFilter<PublishMarketFeesEvent>;

export type PublishMarketFeesChangedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    caller: string;
    PublishMarketFeeAddress: string;
    PublishMarketFeeToken: string;
    PublishMarketFeeAmount: BigNumber;
  }
>;

export type PublishMarketFeesChangedEventFilter =
  TypedEventFilter<PublishMarketFeesChangedEvent>;

export type RemovedMinterEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedMinterEventFilter = TypedEventFilter<RemovedMinterEvent>;

export type RemovedPaymentManagerEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedPaymentManagerEventFilter =
  TypedEventFilter<RemovedPaymentManagerEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ERC20Template extends BaseContract {
  contractName: "ERC20Template";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20TemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    addMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPaymentManager(
      _paymentManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authERC20(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    cleanFrom721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cleanPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDispensers(overrides?: CallOverrides): Promise<[string[]]>;

    getERC721Address(overrides?: CallOverrides): Promise<[string]>;

    getFixedRates(
      overrides?: CallOverrides
    ): Promise<[ERC20Template.FixedRateStructOutput[]]>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    getPaymentCollector(overrides?: CallOverrides): Promise<[string]>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<[ERC20Roles.RolesERC20StructOutput]>;

    getPools(overrides?: CallOverrides): Promise<[string[]]>;

    getPublishingMarketFee(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isERC20Deployer(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { minter: boolean; paymentManager: boolean }
    >;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePaymentManager(
      _paymentManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setData(
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentCollector(
      _newPaymentCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startOrder(
      consumer: string,
      serviceIndex: BigNumberish,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  addMinter(
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPaymentManager(
    _paymentManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authERC20(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  cleanFrom721(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cleanPermissions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDispenser(
    _dispenser: string,
    maxTokens: BigNumberish,
    maxBalance: BigNumberish,
    withMint: boolean,
    allowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createFixedRate(
    fixedPriceAddress: string,
    addresses: string[],
    uints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPool(
    ssParams: BigNumberish[],
    swapFees: BigNumberish[],
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDispensers(overrides?: CallOverrides): Promise<string[]>;

  getERC721Address(overrides?: CallOverrides): Promise<string>;

  getFixedRates(
    overrides?: CallOverrides
  ): Promise<ERC20Template.FixedRateStructOutput[]>;

  getId(overrides?: CallOverrides): Promise<number>;

  getPaymentCollector(overrides?: CallOverrides): Promise<string>;

  getPermissions(
    user: string,
    overrides?: CallOverrides
  ): Promise<ERC20Roles.RolesERC20StructOutput>;

  getPools(overrides?: CallOverrides): Promise<string[]>;

  getPublishingMarketFee(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    strings_: string[],
    addresses_: string[],
    factoryAddresses_: string[],
    uints_: BigNumberish[],
    bytes_: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isERC20Deployer(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  mint(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  permissions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { minter: boolean; paymentManager: boolean }>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMinter(
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePaymentManager(
    _paymentManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reuseOrder(
    orderTxId: BytesLike,
    _providerFees: ERC20Template.ProviderFeesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setData(
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentCollector(
    _newPaymentCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublishingMarketFee(
    _publishMarketFeeAddress: string,
    _publishMarketFeeToken: string,
    _publishMarketFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startOrder(
    consumer: string,
    serviceIndex: BigNumberish,
    _providerFees: ERC20Template.ProviderFeesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    addMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    addPaymentManager(
      _paymentManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authERC20(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    cleanFrom721(overrides?: CallOverrides): Promise<void>;

    cleanPermissions(overrides?: CallOverrides): Promise<void>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDispensers(overrides?: CallOverrides): Promise<string[]>;

    getERC721Address(overrides?: CallOverrides): Promise<string>;

    getFixedRates(
      overrides?: CallOverrides
    ): Promise<ERC20Template.FixedRateStructOutput[]>;

    getId(overrides?: CallOverrides): Promise<number>;

    getPaymentCollector(overrides?: CallOverrides): Promise<string>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<ERC20Roles.RolesERC20StructOutput>;

    getPools(overrides?: CallOverrides): Promise<string[]>;

    getPublishingMarketFee(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC20Deployer(user: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { minter: boolean; paymentManager: boolean }
    >;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    removePaymentManager(
      _paymentManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setData(_value: BytesLike, overrides?: CallOverrides): Promise<void>;

    setPaymentCollector(
      _newPaymentCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startOrder(
      consumer: string,
      serviceIndex: BigNumberish,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddedMinter(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedMinterEventFilter;
    AddedMinter(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedMinterEventFilter;

    "AddedPaymentManager(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedPaymentManagerEventFilter;
    AddedPaymentManager(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedPaymentManagerEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CleanedPermissions(address,uint256,uint256)"(
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): CleanedPermissionsEventFilter;
    CleanedPermissions(
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): CleanedPermissionsEventFilter;

    "MinterApproved(address,address)"(
      currentMinter?: null,
      newMinter?: null
    ): MinterApprovedEventFilter;
    MinterApproved(
      currentMinter?: null,
      newMinter?: null
    ): MinterApprovedEventFilter;

    "MinterProposed(address,address)"(
      currentMinter?: null,
      newMinter?: null
    ): MinterProposedEventFilter;
    MinterProposed(
      currentMinter?: null,
      newMinter?: null
    ): MinterProposedEventFilter;

    "NewDispenser(address)"(dispenserContract?: null): NewDispenserEventFilter;
    NewDispenser(dispenserContract?: null): NewDispenserEventFilter;

    "NewFixedRate(bytes32,address,address,address)"(
      exchangeId?: null,
      owner?: string | null,
      exchangeContract?: null,
      baseToken?: string | null
    ): NewFixedRateEventFilter;
    NewFixedRate(
      exchangeId?: null,
      owner?: string | null,
      exchangeContract?: null,
      baseToken?: string | null
    ): NewFixedRateEventFilter;

    "NewPaymentCollector(address,address,uint256,uint256)"(
      caller?: string | null,
      _newPaymentCollector?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): NewPaymentCollectorEventFilter;
    NewPaymentCollector(
      caller?: string | null,
      _newPaymentCollector?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): NewPaymentCollectorEventFilter;

    "NewPool(address,address,address)"(
      poolAddress?: null,
      ssContract?: null,
      baseTokenAddress?: null
    ): NewPoolEventFilter;
    NewPool(
      poolAddress?: null,
      ssContract?: null,
      baseTokenAddress?: null
    ): NewPoolEventFilter;

    "OrderReused(bytes32,address,uint256,uint256)"(
      orderTxId?: null,
      caller?: null,
      timestamp?: null,
      number?: null
    ): OrderReusedEventFilter;
    OrderReused(
      orderTxId?: null,
      caller?: null,
      timestamp?: null,
      number?: null
    ): OrderReusedEventFilter;

    "OrderStarted(address,address,uint256,uint256,uint256,address,uint256)"(
      consumer?: string | null,
      payer?: null,
      amount?: null,
      serviceIndex?: null,
      timestamp?: null,
      publishMarketAddress?: string | null,
      blockNumber?: null
    ): OrderStartedEventFilter;
    OrderStarted(
      consumer?: string | null,
      payer?: null,
      amount?: null,
      serviceIndex?: null,
      timestamp?: null,
      publishMarketAddress?: string | null,
      blockNumber?: null
    ): OrderStartedEventFilter;

    "ProviderFees(address,address,uint256,bytes,uint8,bytes32,bytes32,uint256)"(
      providerFeeAddress?: string | null,
      providerFeeToken?: string | null,
      providerFeeAmount?: null,
      providerData?: null,
      v?: null,
      r?: null,
      s?: null,
      validUntil?: null
    ): ProviderFeesEventFilter;
    ProviderFees(
      providerFeeAddress?: string | null,
      providerFeeToken?: string | null,
      providerFeeAmount?: null,
      providerData?: null,
      v?: null,
      r?: null,
      s?: null,
      validUntil?: null
    ): ProviderFeesEventFilter;

    "PublishMarketFees(address,address,uint256)"(
      PublishMarketFeeAddress?: string | null,
      PublishMarketFeeToken?: string | null,
      PublishMarketFeeAmount?: null
    ): PublishMarketFeesEventFilter;
    PublishMarketFees(
      PublishMarketFeeAddress?: string | null,
      PublishMarketFeeToken?: string | null,
      PublishMarketFeeAmount?: null
    ): PublishMarketFeesEventFilter;

    "PublishMarketFeesChanged(address,address,address,uint256)"(
      caller?: null,
      PublishMarketFeeAddress?: null,
      PublishMarketFeeToken?: null,
      PublishMarketFeeAmount?: null
    ): PublishMarketFeesChangedEventFilter;
    PublishMarketFeesChanged(
      caller?: null,
      PublishMarketFeeAddress?: null,
      PublishMarketFeeToken?: null,
      PublishMarketFeeAmount?: null
    ): PublishMarketFeesChangedEventFilter;

    "RemovedMinter(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedMinterEventFilter;
    RemovedMinter(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedMinterEventFilter;

    "RemovedPaymentManager(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedPaymentManagerEventFilter;
    RemovedPaymentManager(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedPaymentManagerEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    addMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPaymentManager(
      _paymentManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authERC20(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    cleanFrom721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cleanPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDispensers(overrides?: CallOverrides): Promise<BigNumber>;

    getERC721Address(overrides?: CallOverrides): Promise<BigNumber>;

    getFixedRates(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissions(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPublishingMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isERC20Deployer(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permissions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePaymentManager(
      _paymentManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setData(
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentCollector(
      _newPaymentCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startOrder(
      consumer: string,
      serviceIndex: BigNumberish,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPaymentManager(
      _paymentManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authERC20(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cleanFrom721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cleanPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDispenser(
      _dispenser: string,
      maxTokens: BigNumberish,
      maxBalance: BigNumberish,
      withMint: boolean,
      allowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createFixedRate(
      fixedPriceAddress: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPool(
      ssParams: BigNumberish[],
      swapFees: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDispensers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getERC721Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFixedRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaymentCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublishingMarketFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      strings_: string[],
      addresses_: string[],
      factoryAddresses_: string[],
      uints_: BigNumberish[],
      bytes_: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isERC20Deployer(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePaymentManager(
      _paymentManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reuseOrder(
      orderTxId: BytesLike,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setData(
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentCollector(
      _newPaymentCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublishingMarketFee(
      _publishMarketFeeAddress: string,
      _publishMarketFeeToken: string,
      _publishMarketFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startOrder(
      consumer: string,
      serviceIndex: BigNumberish,
      _providerFees: ERC20Template.ProviderFeesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
