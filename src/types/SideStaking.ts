/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SideStakingInterface extends utils.Interface {
  contractName: "SideStaking";
  functions: {
    "Stake(address,uint256)": FunctionFragment;
    "UnStake(address,uint256,uint256)": FunctionFragment;
    "canStake(address,uint256)": FunctionFragment;
    "canUnStake(address,uint256)": FunctionFragment;
    "getAvailableVesting(address)": FunctionFragment;
    "getBaseTokenAddress(address)": FunctionFragment;
    "getBaseTokenBalance(address)": FunctionFragment;
    "getDatatokenBalance(address)": FunctionFragment;
    "getDatatokenCirculatingSupply(address)": FunctionFragment;
    "getDatatokenCurrentCirculatingSupply(address)": FunctionFragment;
    "getId()": FunctionFragment;
    "getPoolAddress(address)": FunctionFragment;
    "getPublisherAddress(address)": FunctionFragment;
    "getVesting(address)": FunctionFragment;
    "getvestingAmount(address)": FunctionFragment;
    "getvestingAmountSoFar(address)": FunctionFragment;
    "getvestingEndBlock(address)": FunctionFragment;
    "getvestingLastBlock(address)": FunctionFragment;
    "newDatatokenCreated(address,address,address,address,uint256[])": FunctionFragment;
    "router()": FunctionFragment;
    "setPoolSwapFee(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UnStake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canUnStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableVesting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDatatokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDatatokenCirculatingSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDatatokenCurrentCirculatingSupply",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublisherAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVesting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getvestingAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getvestingAmountSoFar",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getvestingEndBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getvestingLastBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newDatatokenCreated",
    values: [string, string, string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPoolSwapFee",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UnStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canUnStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDatatokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDatatokenCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDatatokenCurrentCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublisherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getvestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getvestingAmountSoFar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getvestingEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getvestingLastBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newDatatokenCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolSwapFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SideStaking extends BaseContract {
  contractName: "SideStaking";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SideStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Stake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UnStake(
      datatokenAddress: string,
      dtAmountIn: BigNumberish,
      poolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canStake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canUnStake(
      datatokenAddress: string,
      lptIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAvailableVesting(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseTokenAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBaseTokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDatatokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDatatokenCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDatatokenCurrentCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    getPoolAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPublisherAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVesting(
      datatokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getvestingAmount(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getvestingAmountSoFar(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getvestingEndBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getvestingLastBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newDatatokenCreated(
      datatokenAddress: string,
      baseTokenAddress: string,
      poolAddress: string,
      publisherAddress: string,
      ssParams: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setPoolSwapFee(
      datatokenAddress: string,
      poolAddress: string,
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Stake(
    datatokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UnStake(
    datatokenAddress: string,
    dtAmountIn: BigNumberish,
    poolAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canStake(
    datatokenAddress: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canUnStake(
    datatokenAddress: string,
    lptIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAvailableVesting(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokenAddress(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getBaseTokenBalance(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDatatokenBalance(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDatatokenCirculatingSupply(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDatatokenCurrentCirculatingSupply(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getId(overrides?: CallOverrides): Promise<number>;

  getPoolAddress(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPublisherAddress(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getVesting(
    datatokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getvestingAmount(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getvestingAmountSoFar(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getvestingEndBlock(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getvestingLastBlock(
    datatokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newDatatokenCreated(
    datatokenAddress: string,
    baseTokenAddress: string,
    poolAddress: string,
    publisherAddress: string,
    ssParams: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setPoolSwapFee(
    datatokenAddress: string,
    poolAddress: string,
    swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Stake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UnStake(
      datatokenAddress: string,
      dtAmountIn: BigNumberish,
      poolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canStake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canUnStake(
      datatokenAddress: string,
      lptIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAvailableVesting(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getBaseTokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDatatokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDatatokenCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDatatokenCurrentCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<number>;

    getPoolAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPublisherAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getVesting(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getvestingAmount(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getvestingAmountSoFar(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getvestingEndBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getvestingLastBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newDatatokenCreated(
      datatokenAddress: string,
      baseTokenAddress: string,
      poolAddress: string,
      publisherAddress: string,
      ssParams: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    router(overrides?: CallOverrides): Promise<string>;

    setPoolSwapFee(
      datatokenAddress: string,
      poolAddress: string,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    Stake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UnStake(
      datatokenAddress: string,
      dtAmountIn: BigNumberish,
      poolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canStake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUnStake(
      datatokenAddress: string,
      lptIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableVesting(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDatatokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDatatokenCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDatatokenCurrentCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublisherAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVesting(
      datatokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getvestingAmount(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getvestingAmountSoFar(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getvestingEndBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getvestingLastBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newDatatokenCreated(
      datatokenAddress: string,
      baseTokenAddress: string,
      poolAddress: string,
      publisherAddress: string,
      ssParams: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setPoolSwapFee(
      datatokenAddress: string,
      poolAddress: string,
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Stake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UnStake(
      datatokenAddress: string,
      dtAmountIn: BigNumberish,
      poolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canStake(
      datatokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUnStake(
      datatokenAddress: string,
      lptIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableVesting(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDatatokenBalance(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDatatokenCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDatatokenCurrentCirculatingSupply(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublisherAddress(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVesting(
      datatokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getvestingAmount(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getvestingAmountSoFar(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getvestingEndBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getvestingLastBlock(
      datatokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newDatatokenCreated(
      datatokenAddress: string,
      baseTokenAddress: string,
      poolAddress: string,
      publisherAddress: string,
      ssParams: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPoolSwapFee(
      datatokenAddress: string,
      poolAddress: string,
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
