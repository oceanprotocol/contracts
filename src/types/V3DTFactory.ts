/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface V3DTFactoryInterface extends utils.Interface {
  contractName: "V3DTFactory";
  functions: {
    "createToken(string,string,string,uint256)": FunctionFragment;
    "getCurrentTokenCount()": FunctionFragment;
    "getTokenTemplate()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTemplate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTemplate",
    data: BytesLike
  ): Result;

  events: {
    "InstanceDeployed(address)": EventFragment;
    "TokenCreated(address,address,string)": EventFragment;
    "TokenRegistered(address,string,string,uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InstanceDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
}

export type InstanceDeployedEvent = TypedEvent<[string], { instance: string }>;

export type InstanceDeployedEventFilter =
  TypedEventFilter<InstanceDeployedEvent>;

export type TokenCreatedEvent = TypedEvent<
  [string, string, string],
  { newTokenAddress: string; templateAddress: string; tokenName: string }
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export type TokenRegisteredEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  {
    tokenAddress: string;
    tokenName: string;
    tokenSymbol: string;
    tokenCap: BigNumber;
    registeredBy: string;
    blob: string;
  }
>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface V3DTFactory extends BaseContract {
  contractName: "V3DTFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: V3DTFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createToken(
      blob: string,
      name: string,
      symbol: string,
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenTemplate(overrides?: CallOverrides): Promise<[string]>;
  };

  createToken(
    blob: string,
    name: string,
    symbol: string,
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenTemplate(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createToken(
      blob: string,
      name: string,
      symbol: string,
      cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenTemplate(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "InstanceDeployed(address)"(instance?: null): InstanceDeployedEventFilter;
    InstanceDeployed(instance?: null): InstanceDeployedEventFilter;

    "TokenCreated(address,address,string)"(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      tokenName?: string | null
    ): TokenCreatedEventFilter;
    TokenCreated(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      tokenName?: string | null
    ): TokenCreatedEventFilter;

    "TokenRegistered(address,string,string,uint256,address,string)"(
      tokenAddress?: string | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenCap?: null,
      registeredBy?: string | null,
      blob?: string | null
    ): TokenRegisteredEventFilter;
    TokenRegistered(
      tokenAddress?: string | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenCap?: null,
      registeredBy?: string | null,
      blob?: string | null
    ): TokenRegisteredEventFilter;
  };

  estimateGas: {
    createToken(
      blob: string,
      name: string,
      symbol: string,
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenTemplate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createToken(
      blob: string,
      name: string,
      symbol: string,
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
