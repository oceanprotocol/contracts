/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ERC721Factory {
  export type NftCreateDataStruct = {
    name: string;
    symbol: string;
    templateIndex: BigNumberish;
    tokenURI: string;
  };

  export type NftCreateDataStructOutput = [
    string,
    string,
    BigNumber,
    string
  ] & {
    name: string;
    symbol: string;
    templateIndex: BigNumber;
    tokenURI: string;
  };

  export type ErcCreateDataStruct = {
    templateIndex: BigNumberish;
    strings: string[];
    addresses: string[];
    uints: BigNumberish[];
    bytess: BytesLike[];
  };

  export type ErcCreateDataStructOutput = [
    BigNumber,
    string[],
    string[],
    BigNumber[],
    string[]
  ] & {
    templateIndex: BigNumber;
    strings: string[];
    addresses: string[];
    uints: BigNumber[];
    bytess: string[];
  };

  export type DispenserDataStruct = {
    dispenserAddress: string;
    maxTokens: BigNumberish;
    maxBalance: BigNumberish;
    withMint: boolean;
    allowedSwapper: string;
  };

  export type DispenserDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    dispenserAddress: string;
    maxTokens: BigNumber;
    maxBalance: BigNumber;
    withMint: boolean;
    allowedSwapper: string;
  };

  export type FixedDataStruct = {
    fixedPriceAddress: string;
    addresses: string[];
    uints: BigNumberish[];
  };

  export type FixedDataStructOutput = [string, string[], BigNumber[]] & {
    fixedPriceAddress: string;
    addresses: string[];
    uints: BigNumber[];
  };

  export type PoolDataStruct = {
    ssParams: BigNumberish[];
    swapFees: BigNumberish[];
    addresses: string[];
  };

  export type PoolDataStructOutput = [BigNumber[], BigNumber[], string[]] & {
    ssParams: BigNumber[];
    swapFees: BigNumber[];
    addresses: string[];
  };

  export type TemplateStruct = { templateAddress: string; isActive: boolean };

  export type TemplateStructOutput = [string, boolean] & {
    templateAddress: string;
    isActive: boolean;
  };

  export type ReuseTokenOrderStruct = {
    tokenAddress: string;
    orderTxId: BytesLike;
    _providerFees: IERC20Template.ProviderFeesStruct;
  };

  export type ReuseTokenOrderStructOutput = [
    string,
    string,
    IERC20Template.ProviderFeesStructOutput
  ] & {
    tokenAddress: string;
    orderTxId: string;
    _providerFees: IERC20Template.ProviderFeesStructOutput;
  };

  export type TokenOrderStruct = {
    tokenAddress: string;
    consumer: string;
    serviceIndex: BigNumberish;
    _providerFees: IERC20Template.ProviderFeesStruct;
  };

  export type TokenOrderStructOutput = [
    string,
    string,
    BigNumber,
    IERC20Template.ProviderFeesStructOutput
  ] & {
    tokenAddress: string;
    consumer: string;
    serviceIndex: BigNumber;
    _providerFees: IERC20Template.ProviderFeesStructOutput;
  };
}

export declare namespace IERC20Template {
  export type ProviderFeesStruct = {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    validUntil: BigNumberish;
    providerData: BytesLike;
  };

  export type ProviderFeesStructOutput = [
    string,
    string,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    string
  ] & {
    providerFeeAddress: string;
    providerFeeToken: string;
    providerFeeAmount: BigNumber;
    v: number;
    r: string;
    s: string;
    validUntil: BigNumber;
    providerData: string;
  };
}

export interface ERC721FactoryInterface extends utils.Interface {
  contractName: "ERC721Factory";
  functions: {
    "add721TokenTemplate(address)": FunctionFragment;
    "addTokenTemplate(address)": FunctionFragment;
    "createNftWithErc20((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]))": FunctionFragment;
    "createNftWithErc20WithDispenser((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]),(address,uint256,uint256,bool,address))": FunctionFragment;
    "createNftWithErc20WithFixedRate((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]),(address,address[],uint256[]))": FunctionFragment;
    "createNftWithErc20WithPool((string,string,uint256,string),(uint256,string[],address[],uint256[],bytes[]),(uint256[],uint256[],address[]))": FunctionFragment;
    "createToken(uint256,string[],address[],uint256[],bytes[])": FunctionFragment;
    "deployERC721Contract(string,string,uint256,address,string)": FunctionFragment;
    "disable721TokenTemplate(uint256)": FunctionFragment;
    "disableTokenTemplate(uint256)": FunctionFragment;
    "erc20List(address)": FunctionFragment;
    "erc721List(address)": FunctionFragment;
    "getCurrentNFTCount()": FunctionFragment;
    "getCurrentNFTTemplateCount()": FunctionFragment;
    "getCurrentTemplateCount()": FunctionFragment;
    "getCurrentTokenCount()": FunctionFragment;
    "getNFTTemplate(uint256)": FunctionFragment;
    "getTokenTemplate(uint256)": FunctionFragment;
    "nftTemplateList(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "reactivate721TokenTemplate(uint256)": FunctionFragment;
    "reactivateTokenTemplate(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reuseMultipleTokenOrder((address,bytes32,(address,address,uint256,uint8,bytes32,bytes32,uint256,bytes))[])": FunctionFragment;
    "router()": FunctionFragment;
    "startMultipleTokenOrder((address,address,uint256,(address,address,uint256,uint8,bytes32,bytes32,uint256,bytes))[])": FunctionFragment;
    "templateCount()": FunctionFragment;
    "templateList(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add721TokenTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20",
    values: [
      ERC721Factory.NftCreateDataStruct,
      ERC721Factory.ErcCreateDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20WithDispenser",
    values: [
      ERC721Factory.NftCreateDataStruct,
      ERC721Factory.ErcCreateDataStruct,
      ERC721Factory.DispenserDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20WithFixedRate",
    values: [
      ERC721Factory.NftCreateDataStruct,
      ERC721Factory.ErcCreateDataStruct,
      ERC721Factory.FixedDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftWithErc20WithPool",
    values: [
      ERC721Factory.NftCreateDataStruct,
      ERC721Factory.ErcCreateDataStruct,
      ERC721Factory.PoolDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [BigNumberish, string[], string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployERC721Contract",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disable721TokenTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableTokenTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "erc20List", values: [string]): string;
  encodeFunctionData(functionFragment: "erc721List", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCurrentNFTCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentNFTTemplateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTemplateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftTemplateList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivate721TokenTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateTokenTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reuseMultipleTokenOrder",
    values: [ERC721Factory.ReuseTokenOrderStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startMultipleTokenOrder",
    values: [ERC721Factory.TokenOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "templateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templateList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "add721TokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20WithDispenser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20WithFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftWithErc20WithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployERC721Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disable721TokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20List", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc721List", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentNFTCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentNFTTemplateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTemplateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftTemplateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivate721TokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateTokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reuseMultipleTokenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startMultipleTokenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DispenserCreated(address,address,uint256,uint256,address)": EventFragment;
    "InstanceDeployed(address)": EventFragment;
    "NFTCreated(address,address,string,address,string,string)": EventFragment;
    "NewDispenser(address)": EventFragment;
    "NewFixedRate(bytes32,address,address,address)": EventFragment;
    "NewPool(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Template20Added(address,uint256)": EventFragment;
    "Template721Added(address,uint256)": EventFragment;
    "TokenCreated(address,address,string,string,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DispenserCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstanceDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDispenser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFixedRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Template20Added"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Template721Added"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
}

export type DispenserCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  {
    datatokenAddress: string;
    owner: string;
    maxTokens: BigNumber;
    maxBalance: BigNumber;
    allowedSwapper: string;
  }
>;

export type DispenserCreatedEventFilter =
  TypedEventFilter<DispenserCreatedEvent>;

export type InstanceDeployedEvent = TypedEvent<[string], { instance: string }>;

export type InstanceDeployedEventFilter =
  TypedEventFilter<InstanceDeployedEvent>;

export type NFTCreatedEvent = TypedEvent<
  [string, string, string, string, string, string],
  {
    newTokenAddress: string;
    templateAddress: string;
    tokenName: string;
    admin: string;
    symbol: string;
    tokenURI: string;
  }
>;

export type NFTCreatedEventFilter = TypedEventFilter<NFTCreatedEvent>;

export type NewDispenserEvent = TypedEvent<
  [string],
  { dispenserContract: string }
>;

export type NewDispenserEventFilter = TypedEventFilter<NewDispenserEvent>;

export type NewFixedRateEvent = TypedEvent<
  [string, string, string, string],
  {
    exchangeId: string;
    owner: string;
    exchangeContract: string;
    baseToken: string;
  }
>;

export type NewFixedRateEventFilter = TypedEventFilter<NewFixedRateEvent>;

export type NewPoolEvent = TypedEvent<
  [string, string, string],
  { poolAddress: string; ssContract: string; baseTokenAddress: string }
>;

export type NewPoolEventFilter = TypedEventFilter<NewPoolEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type Template20AddedEvent = TypedEvent<
  [string, BigNumber],
  { _templateAddress: string; nftTemplateCount: BigNumber }
>;

export type Template20AddedEventFilter = TypedEventFilter<Template20AddedEvent>;

export type Template721AddedEvent = TypedEvent<
  [string, BigNumber],
  { _templateAddress: string; nftTemplateCount: BigNumber }
>;

export type Template721AddedEventFilter =
  TypedEventFilter<Template721AddedEvent>;

export type TokenCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  {
    newTokenAddress: string;
    templateAddress: string;
    name: string;
    symbol: string;
    cap: BigNumber;
    creator: string;
  }
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface ERC721Factory extends BaseContract {
  contractName: "ERC721Factory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add721TokenTemplate(
      _templateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenTemplate(
      _templateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20WithDispenser(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _DispenserData: ERC721Factory.DispenserDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _FixedData: ERC721Factory.FixedDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftWithErc20WithPool(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _PoolData: ERC721Factory.PoolDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployERC721Contract(
      name: string,
      symbol: string,
      _templateIndex: BigNumberish,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disable721TokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableTokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20List(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    erc721List(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getCurrentNFTCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentNFTTemplateCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTemplateCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNFTTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ERC721Factory.TemplateStructOutput]>;

    getTokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ERC721Factory.TemplateStructOutput]>;

    nftTemplateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { templateAddress: string; isActive: boolean }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reactivate721TokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reactivateTokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reuseMultipleTokenOrder(
      orders: ERC721Factory.ReuseTokenOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    startMultipleTokenOrder(
      orders: ERC721Factory.TokenOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    templateCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    templateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { templateAddress: string; isActive: boolean }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add721TokenTemplate(
    _templateAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenTemplate(
    _templateAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20(
    _NftCreateData: ERC721Factory.NftCreateDataStruct,
    _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20WithDispenser(
    _NftCreateData: ERC721Factory.NftCreateDataStruct,
    _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
    _DispenserData: ERC721Factory.DispenserDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20WithFixedRate(
    _NftCreateData: ERC721Factory.NftCreateDataStruct,
    _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
    _FixedData: ERC721Factory.FixedDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftWithErc20WithPool(
    _NftCreateData: ERC721Factory.NftCreateDataStruct,
    _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
    _PoolData: ERC721Factory.PoolDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createToken(
    _templateIndex: BigNumberish,
    strings: string[],
    addresses: string[],
    uints: BigNumberish[],
    bytess: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployERC721Contract(
    name: string,
    symbol: string,
    _templateIndex: BigNumberish,
    additionalERC20Deployer: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disable721TokenTemplate(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableTokenTemplate(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20List(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  erc721List(arg0: string, overrides?: CallOverrides): Promise<string>;

  getCurrentNFTCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentNFTTemplateCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTemplateCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  getNFTTemplate(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ERC721Factory.TemplateStructOutput>;

  getTokenTemplate(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ERC721Factory.TemplateStructOutput>;

  nftTemplateList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { templateAddress: string; isActive: boolean }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  reactivate721TokenTemplate(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reactivateTokenTemplate(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reuseMultipleTokenOrder(
    orders: ERC721Factory.ReuseTokenOrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  startMultipleTokenOrder(
    orders: ERC721Factory.TokenOrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  templateCount(overrides?: CallOverrides): Promise<BigNumber>;

  templateList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { templateAddress: string; isActive: boolean }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add721TokenTemplate(
      _templateAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTokenTemplate(
      _templateAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNftWithErc20(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { erc721Address: string; erc20Address: string }
    >;

    createNftWithErc20WithDispenser(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _DispenserData: ERC721Factory.DispenserDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { erc721Address: string; erc20Address: string }
    >;

    createNftWithErc20WithFixedRate(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _FixedData: ERC721Factory.FixedDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        erc721Address: string;
        erc20Address: string;
        exchangeId: string;
      }
    >;

    createNftWithErc20WithPool(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _PoolData: ERC721Factory.PoolDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        erc721Address: string;
        erc20Address: string;
        poolAddress: string;
      }
    >;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    deployERC721Contract(
      name: string,
      symbol: string,
      _templateIndex: BigNumberish,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<string>;

    disable721TokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableTokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20List(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    erc721List(arg0: string, overrides?: CallOverrides): Promise<string>;

    getCurrentNFTCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentNFTTemplateCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTemplateCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ERC721Factory.TemplateStructOutput>;

    getTokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ERC721Factory.TemplateStructOutput>;

    nftTemplateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { templateAddress: string; isActive: boolean }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    reactivate721TokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reactivateTokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reuseMultipleTokenOrder(
      orders: ERC721Factory.ReuseTokenOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    startMultipleTokenOrder(
      orders: ERC721Factory.TokenOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    templateCount(overrides?: CallOverrides): Promise<BigNumber>;

    templateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { templateAddress: string; isActive: boolean }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DispenserCreated(address,address,uint256,uint256,address)"(
      datatokenAddress?: string | null,
      owner?: string | null,
      maxTokens?: null,
      maxBalance?: null,
      allowedSwapper?: null
    ): DispenserCreatedEventFilter;
    DispenserCreated(
      datatokenAddress?: string | null,
      owner?: string | null,
      maxTokens?: null,
      maxBalance?: null,
      allowedSwapper?: null
    ): DispenserCreatedEventFilter;

    "InstanceDeployed(address)"(instance?: null): InstanceDeployedEventFilter;
    InstanceDeployed(instance?: null): InstanceDeployedEventFilter;

    "NFTCreated(address,address,string,address,string,string)"(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      tokenName?: null,
      admin?: null,
      symbol?: null,
      tokenURI?: null
    ): NFTCreatedEventFilter;
    NFTCreated(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      tokenName?: null,
      admin?: null,
      symbol?: null,
      tokenURI?: null
    ): NFTCreatedEventFilter;

    "NewDispenser(address)"(dispenserContract?: null): NewDispenserEventFilter;
    NewDispenser(dispenserContract?: null): NewDispenserEventFilter;

    "NewFixedRate(bytes32,address,address,address)"(
      exchangeId?: null,
      owner?: string | null,
      exchangeContract?: null,
      baseToken?: string | null
    ): NewFixedRateEventFilter;
    NewFixedRate(
      exchangeId?: null,
      owner?: string | null,
      exchangeContract?: null,
      baseToken?: string | null
    ): NewFixedRateEventFilter;

    "NewPool(address,address,address)"(
      poolAddress?: null,
      ssContract?: null,
      baseTokenAddress?: null
    ): NewPoolEventFilter;
    NewPool(
      poolAddress?: null,
      ssContract?: null,
      baseTokenAddress?: null
    ): NewPoolEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Template20Added(address,uint256)"(
      _templateAddress?: string | null,
      nftTemplateCount?: BigNumberish | null
    ): Template20AddedEventFilter;
    Template20Added(
      _templateAddress?: string | null,
      nftTemplateCount?: BigNumberish | null
    ): Template20AddedEventFilter;

    "Template721Added(address,uint256)"(
      _templateAddress?: string | null,
      nftTemplateCount?: BigNumberish | null
    ): Template721AddedEventFilter;
    Template721Added(
      _templateAddress?: string | null,
      nftTemplateCount?: BigNumberish | null
    ): Template721AddedEventFilter;

    "TokenCreated(address,address,string,string,uint256,address)"(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      name?: null,
      symbol?: null,
      cap?: null,
      creator?: null
    ): TokenCreatedEventFilter;
    TokenCreated(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      name?: null,
      symbol?: null,
      cap?: null,
      creator?: null
    ): TokenCreatedEventFilter;
  };

  estimateGas: {
    add721TokenTemplate(
      _templateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenTemplate(
      _templateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20WithDispenser(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _DispenserData: ERC721Factory.DispenserDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _FixedData: ERC721Factory.FixedDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftWithErc20WithPool(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _PoolData: ERC721Factory.PoolDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployERC721Contract(
      name: string,
      symbol: string,
      _templateIndex: BigNumberish,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disable721TokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableTokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20List(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    erc721List(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentNFTCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentNFTTemplateCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTemplateCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftTemplateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reactivate721TokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reactivateTokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reuseMultipleTokenOrder(
      orders: ERC721Factory.ReuseTokenOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    startMultipleTokenOrder(
      orders: ERC721Factory.TokenOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    templateCount(overrides?: CallOverrides): Promise<BigNumber>;

    templateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add721TokenTemplate(
      _templateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenTemplate(
      _templateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20WithDispenser(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _DispenserData: ERC721Factory.DispenserDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20WithFixedRate(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _FixedData: ERC721Factory.FixedDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftWithErc20WithPool(
      _NftCreateData: ERC721Factory.NftCreateDataStruct,
      _ErcCreateData: ERC721Factory.ErcCreateDataStruct,
      _PoolData: ERC721Factory.PoolDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployERC721Contract(
      name: string,
      symbol: string,
      _templateIndex: BigNumberish,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disable721TokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableTokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20List(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc721List(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentNFTCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentNFTTemplateCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTemplateCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenTemplate(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftTemplateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reactivate721TokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reactivateTokenTemplate(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reuseMultipleTokenOrder(
      orders: ERC721Factory.ReuseTokenOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startMultipleTokenOrder(
      orders: ERC721Factory.TokenOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    templateCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templateList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
