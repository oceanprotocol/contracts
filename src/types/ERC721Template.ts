/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ERC721RolesAddress {
  export type RolesStruct = {
    manager: boolean;
    deployERC20: boolean;
    updateMetadata: boolean;
    store: boolean;
  };

  export type RolesStructOutput = [boolean, boolean, boolean, boolean] & {
    manager: boolean;
    deployERC20: boolean;
    updateMetadata: boolean;
    store: boolean;
  };
}

export declare namespace ERC721Template {
  export type MetaDataProofStruct = {
    validatorAddress: string;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type MetaDataProofStructOutput = [string, number, string, string] & {
    validatorAddress: string;
    v: number;
    r: string;
    s: string;
  };

  export type MetaDataAndTokenURIStruct = {
    metaDataState: BigNumberish;
    metaDataDecryptorUrl: string;
    metaDataDecryptorAddress: string;
    flags: BytesLike;
    data: BytesLike;
    metaDataHash: BytesLike;
    tokenId: BigNumberish;
    tokenURI: string;
    metadataProofs: ERC721Template.MetaDataProofStruct[];
  };

  export type MetaDataAndTokenURIStructOutput = [
    number,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    ERC721Template.MetaDataProofStructOutput[]
  ] & {
    metaDataState: number;
    metaDataDecryptorUrl: string;
    metaDataDecryptorAddress: string;
    flags: string;
    data: string;
    metaDataHash: string;
    tokenId: BigNumber;
    tokenURI: string;
    metadataProofs: ERC721Template.MetaDataProofStructOutput[];
  };
}

export interface ERC721TemplateInterface extends utils.Interface {
  contractName: "ERC721Template";
  functions: {
    "addManager(address)": FunctionFragment;
    "addTo725StoreList(address)": FunctionFragment;
    "addToCreateERC20List(address)": FunctionFragment;
    "addToMetadataList(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auth(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cleanPermissions()": FunctionFragment;
    "createERC20(uint256,string[],address[],uint256[],bytes[])": FunctionFragment;
    "executeCall(uint256,address,uint256,bytes)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getData(bytes32)": FunctionFragment;
    "getId()": FunctionFragment;
    "getMetaData()": FunctionFragment;
    "getPermissions(address)": FunctionFragment;
    "getTokensList()": FunctionFragment;
    "hasMetaData()": FunctionFragment;
    "initialize(address,string,string,address,address,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isDeployed(address)": FunctionFragment;
    "isERC20Deployer(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "metaDataDecryptorAddress()": FunctionFragment;
    "metaDataDecryptorUrl()": FunctionFragment;
    "metaDataState()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "removeFrom725StoreList(address)": FunctionFragment;
    "removeFromCreateERC20List(address)": FunctionFragment;
    "removeFromMetadataList(address)": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setDataERC20(bytes32,bytes)": FunctionFragment;
    "setMetaData(uint8,string,string,bytes,bytes,bytes32,(address,uint8,bytes32,bytes32)[])": FunctionFragment;
    "setMetaDataAndTokenURI((uint8,string,string,bytes,bytes,bytes32,uint256,string,(address,uint8,bytes32,bytes32)[]))": FunctionFragment;
    "setMetaDataState(uint8)": FunctionFragment;
    "setNewData(bytes32,bytes)": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "ssContract()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addTo725StoreList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToCreateERC20List",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToMetadataList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "auth", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cleanPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20",
    values: [BigNumberish, string[], string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMetaData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasMetaData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isDeployed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isERC20Deployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metaDataDecryptorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metaDataDecryptorUrl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metaDataState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFrom725StoreList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromCreateERC20List",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromMetadataList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDataERC20",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaData",
    values: [
      BigNumberish,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      ERC721Template.MetaDataProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaDataAndTokenURI",
    values: [ERC721Template.MetaDataAndTokenURIStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaDataState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewData",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ssContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTo725StoreList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToCreateERC20List",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToMetadataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetaData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMetaData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeployed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Deployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaDataDecryptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaDataDecryptorUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaDataState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFrom725StoreList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromCreateERC20List",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromMetadataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDataERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaDataAndTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaDataState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNewData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ssContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "AddedManager(address,address,uint256,uint256)": EventFragment;
    "AddedTo725StoreList(address,address,uint256,uint256)": EventFragment;
    "AddedToCreateERC20List(address,address,uint256,uint256)": EventFragment;
    "AddedToMetadataList(address,address,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CleanedPermissions(address,uint256,uint256)": EventFragment;
    "ContractCreated(address)": EventFragment;
    "DataChanged(bytes32,bytes)": EventFragment;
    "Executed(uint256,address,uint256,bytes)": EventFragment;
    "MetadataCreated(address,uint8,string,bytes,bytes,bytes32,uint256,uint256)": EventFragment;
    "MetadataState(address,uint8,uint256,uint256)": EventFragment;
    "MetadataUpdated(address,uint8,string,bytes,bytes,bytes32,uint256,uint256)": EventFragment;
    "MetadataValidated(address,bytes32,uint8,bytes32,bytes32)": EventFragment;
    "RemovedFrom725StoreList(address,address,uint256,uint256)": EventFragment;
    "RemovedFromCreateERC20List(address,address,uint256,uint256)": EventFragment;
    "RemovedFromMetadataList(address,address,uint256,uint256)": EventFragment;
    "RemovedManager(address,address,uint256,uint256)": EventFragment;
    "TokenCreated(address,address,string,string,uint256,address)": EventFragment;
    "TokenURIUpdate(address,string,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedTo725StoreList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedToCreateERC20List"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedToMetadataList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CleanedPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFrom725StoreList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromCreateERC20List"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromMetadataList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenURIUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AddedManagerEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedManagerEventFilter = TypedEventFilter<AddedManagerEvent>;

export type AddedTo725StoreListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedTo725StoreListEventFilter =
  TypedEventFilter<AddedTo725StoreListEvent>;

export type AddedToCreateERC20ListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedToCreateERC20ListEventFilter =
  TypedEventFilter<AddedToCreateERC20ListEvent>;

export type AddedToMetadataListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type AddedToMetadataListEventFilter =
  TypedEventFilter<AddedToMetadataListEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type CleanedPermissionsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type CleanedPermissionsEventFilter =
  TypedEventFilter<CleanedPermissionsEvent>;

export type ContractCreatedEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;

export type DataChangedEvent = TypedEvent<
  [string, string],
  { key: string; value: string }
>;

export type DataChangedEventFilter = TypedEventFilter<DataChangedEvent>;

export type ExecutedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  { _operation: BigNumber; _to: string; _value: BigNumber; _data: string }
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export type MetadataCreatedEvent = TypedEvent<
  [string, number, string, string, string, string, BigNumber, BigNumber],
  {
    createdBy: string;
    state: number;
    decryptorUrl: string;
    flags: string;
    data: string;
    metaDataHash: string;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type MetadataCreatedEventFilter = TypedEventFilter<MetadataCreatedEvent>;

export type MetadataStateEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  {
    updatedBy: string;
    state: number;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type MetadataStateEventFilter = TypedEventFilter<MetadataStateEvent>;

export type MetadataUpdatedEvent = TypedEvent<
  [string, number, string, string, string, string, BigNumber, BigNumber],
  {
    updatedBy: string;
    state: number;
    decryptorUrl: string;
    flags: string;
    data: string;
    metaDataHash: string;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type MetadataUpdatedEventFilter = TypedEventFilter<MetadataUpdatedEvent>;

export type MetadataValidatedEvent = TypedEvent<
  [string, string, number, string, string],
  { validator: string; metaDataHash: string; v: number; r: string; s: string }
>;

export type MetadataValidatedEventFilter =
  TypedEventFilter<MetadataValidatedEvent>;

export type RemovedFrom725StoreListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedFrom725StoreListEventFilter =
  TypedEventFilter<RemovedFrom725StoreListEvent>;

export type RemovedFromCreateERC20ListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedFromCreateERC20ListEventFilter =
  TypedEventFilter<RemovedFromCreateERC20ListEvent>;

export type RemovedFromMetadataListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedFromMetadataListEventFilter =
  TypedEventFilter<RemovedFromMetadataListEvent>;

export type RemovedManagerEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; signer: string; timestamp: BigNumber; blockNumber: BigNumber }
>;

export type RemovedManagerEventFilter = TypedEventFilter<RemovedManagerEvent>;

export type TokenCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  {
    newTokenAddress: string;
    templateAddress: string;
    name: string;
    symbol: string;
    cap: BigNumber;
    creator: string;
  }
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export type TokenURIUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    updatedBy: string;
    tokenURI: string;
    tokenID: BigNumber;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type TokenURIUpdateEventFilter = TypedEventFilter<TokenURIUpdateEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ERC721Template extends BaseContract {
  contractName: "ERC721Template";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721TemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addManager(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTo725StoreList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToCreateERC20List(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToMetadataList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auth(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cleanPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createERC20(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeCall(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { _value: string }>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    getMetaData(
      overrides?: CallOverrides
    ): Promise<[string, string, number, boolean]>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<[ERC721RolesAddress.RolesStructOutput]>;

    getTokensList(overrides?: CallOverrides): Promise<[string[]]>;

    hasMetaData(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      owner: string,
      name_: string,
      symbol_: string,
      tokenFactory: string,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDeployed(
      datatoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC20Deployer(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    metaDataDecryptorAddress(overrides?: CallOverrides): Promise<[string]>;

    metaDataDecryptorUrl(overrides?: CallOverrides): Promise<[string]>;

    metaDataState(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeFrom725StoreList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromCreateERC20List(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromMetadataList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeManager(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDataERC20(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetaData(
      _metaDataState: BigNumberish,
      _metaDataDecryptorUrl: string,
      _metaDataDecryptorAddress: string,
      flags: BytesLike,
      data: BytesLike,
      _metaDataHash: BytesLike,
      _metadataProofs: ERC721Template.MetaDataProofStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetaDataAndTokenURI(
      _metaDataAndTokenURI: ERC721Template.MetaDataAndTokenURIStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetaDataState(
      _metaDataState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ssContract(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addManager(
    _managerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTo725StoreList(
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToCreateERC20List(
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToMetadataList(
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auth(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  cleanPermissions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createERC20(
    _templateIndex: BigNumberish,
    strings: string[],
    addresses: string[],
    uints: BigNumberish[],
    bytess: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeCall(
    _operation: BigNumberish,
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getData(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  getId(overrides?: CallOverrides): Promise<number>;

  getMetaData(
    overrides?: CallOverrides
  ): Promise<[string, string, number, boolean]>;

  getPermissions(
    user: string,
    overrides?: CallOverrides
  ): Promise<ERC721RolesAddress.RolesStructOutput>;

  getTokensList(overrides?: CallOverrides): Promise<string[]>;

  hasMetaData(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    owner: string,
    name_: string,
    symbol_: string,
    tokenFactory: string,
    additionalERC20Deployer: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDeployed(datatoken: string, overrides?: CallOverrides): Promise<boolean>;

  isERC20Deployer(account: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  metaDataDecryptorAddress(overrides?: CallOverrides): Promise<string>;

  metaDataDecryptorUrl(overrides?: CallOverrides): Promise<string>;

  metaDataState(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeFrom725StoreList(
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromCreateERC20List(
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromMetadataList(
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeManager(
    _managerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDataERC20(
    _key: BytesLike,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetaData(
    _metaDataState: BigNumberish,
    _metaDataDecryptorUrl: string,
    _metaDataDecryptorAddress: string,
    flags: BytesLike,
    data: BytesLike,
    _metaDataHash: BytesLike,
    _metadataProofs: ERC721Template.MetaDataProofStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetaDataAndTokenURI(
    _metaDataAndTokenURI: ERC721Template.MetaDataAndTokenURIStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetaDataState(
    _metaDataState: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewData(
    _key: BytesLike,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ssContract(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addManager(
      _managerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTo725StoreList(
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToCreateERC20List(
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToMetadataList(
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auth(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cleanPermissions(overrides?: CallOverrides): Promise<void>;

    createERC20(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    executeCall(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getData(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    getId(overrides?: CallOverrides): Promise<number>;

    getMetaData(
      overrides?: CallOverrides
    ): Promise<[string, string, number, boolean]>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<ERC721RolesAddress.RolesStructOutput>;

    getTokensList(overrides?: CallOverrides): Promise<string[]>;

    hasMetaData(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      owner: string,
      name_: string,
      symbol_: string,
      tokenFactory: string,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDeployed(datatoken: string, overrides?: CallOverrides): Promise<boolean>;

    isERC20Deployer(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    metaDataDecryptorAddress(overrides?: CallOverrides): Promise<string>;

    metaDataDecryptorUrl(overrides?: CallOverrides): Promise<string>;

    metaDataState(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeFrom725StoreList(
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromCreateERC20List(
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromMetadataList(
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeManager(
      _managerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setDataERC20(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaData(
      _metaDataState: BigNumberish,
      _metaDataDecryptorUrl: string,
      _metaDataDecryptorAddress: string,
      flags: BytesLike,
      data: BytesLike,
      _metaDataHash: BytesLike,
      _metadataProofs: ERC721Template.MetaDataProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaDataAndTokenURI(
      _metaDataAndTokenURI: ERC721Template.MetaDataAndTokenURIStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaDataState(
      _metaDataState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ssContract(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddedManager(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedManagerEventFilter;
    AddedManager(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedManagerEventFilter;

    "AddedTo725StoreList(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedTo725StoreListEventFilter;
    AddedTo725StoreList(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedTo725StoreListEventFilter;

    "AddedToCreateERC20List(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedToCreateERC20ListEventFilter;
    AddedToCreateERC20List(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedToCreateERC20ListEventFilter;

    "AddedToMetadataList(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedToMetadataListEventFilter;
    AddedToMetadataList(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): AddedToMetadataListEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CleanedPermissions(address,uint256,uint256)"(
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): CleanedPermissionsEventFilter;
    CleanedPermissions(
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): CleanedPermissionsEventFilter;

    "ContractCreated(address)"(
      contractAddress?: string | null
    ): ContractCreatedEventFilter;
    ContractCreated(
      contractAddress?: string | null
    ): ContractCreatedEventFilter;

    "DataChanged(bytes32,bytes)"(
      key?: BytesLike | null,
      value?: null
    ): DataChangedEventFilter;
    DataChanged(key?: BytesLike | null, value?: null): DataChangedEventFilter;

    "Executed(uint256,address,uint256,bytes)"(
      _operation?: BigNumberish | null,
      _to?: string | null,
      _value?: BigNumberish | null,
      _data?: null
    ): ExecutedEventFilter;
    Executed(
      _operation?: BigNumberish | null,
      _to?: string | null,
      _value?: BigNumberish | null,
      _data?: null
    ): ExecutedEventFilter;

    "MetadataCreated(address,uint8,string,bytes,bytes,bytes32,uint256,uint256)"(
      createdBy?: string | null,
      state?: null,
      decryptorUrl?: null,
      flags?: null,
      data?: null,
      metaDataHash?: null,
      timestamp?: null,
      blockNumber?: null
    ): MetadataCreatedEventFilter;
    MetadataCreated(
      createdBy?: string | null,
      state?: null,
      decryptorUrl?: null,
      flags?: null,
      data?: null,
      metaDataHash?: null,
      timestamp?: null,
      blockNumber?: null
    ): MetadataCreatedEventFilter;

    "MetadataState(address,uint8,uint256,uint256)"(
      updatedBy?: string | null,
      state?: null,
      timestamp?: null,
      blockNumber?: null
    ): MetadataStateEventFilter;
    MetadataState(
      updatedBy?: string | null,
      state?: null,
      timestamp?: null,
      blockNumber?: null
    ): MetadataStateEventFilter;

    "MetadataUpdated(address,uint8,string,bytes,bytes,bytes32,uint256,uint256)"(
      updatedBy?: string | null,
      state?: null,
      decryptorUrl?: null,
      flags?: null,
      data?: null,
      metaDataHash?: null,
      timestamp?: null,
      blockNumber?: null
    ): MetadataUpdatedEventFilter;
    MetadataUpdated(
      updatedBy?: string | null,
      state?: null,
      decryptorUrl?: null,
      flags?: null,
      data?: null,
      metaDataHash?: null,
      timestamp?: null,
      blockNumber?: null
    ): MetadataUpdatedEventFilter;

    "MetadataValidated(address,bytes32,uint8,bytes32,bytes32)"(
      validator?: string | null,
      metaDataHash?: null,
      v?: null,
      r?: null,
      s?: null
    ): MetadataValidatedEventFilter;
    MetadataValidated(
      validator?: string | null,
      metaDataHash?: null,
      v?: null,
      r?: null,
      s?: null
    ): MetadataValidatedEventFilter;

    "RemovedFrom725StoreList(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedFrom725StoreListEventFilter;
    RemovedFrom725StoreList(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedFrom725StoreListEventFilter;

    "RemovedFromCreateERC20List(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedFromCreateERC20ListEventFilter;
    RemovedFromCreateERC20List(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedFromCreateERC20ListEventFilter;

    "RemovedFromMetadataList(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedFromMetadataListEventFilter;
    RemovedFromMetadataList(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedFromMetadataListEventFilter;

    "RemovedManager(address,address,uint256,uint256)"(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedManagerEventFilter;
    RemovedManager(
      user?: string | null,
      signer?: string | null,
      timestamp?: null,
      blockNumber?: null
    ): RemovedManagerEventFilter;

    "TokenCreated(address,address,string,string,uint256,address)"(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      name?: null,
      symbol?: null,
      cap?: null,
      creator?: null
    ): TokenCreatedEventFilter;
    TokenCreated(
      newTokenAddress?: string | null,
      templateAddress?: string | null,
      name?: null,
      symbol?: null,
      cap?: null,
      creator?: null
    ): TokenCreatedEventFilter;

    "TokenURIUpdate(address,string,uint256,uint256,uint256)"(
      updatedBy?: string | null,
      tokenURI?: null,
      tokenID?: null,
      timestamp?: null,
      blockNumber?: null
    ): TokenURIUpdateEventFilter;
    TokenURIUpdate(
      updatedBy?: string | null,
      tokenURI?: null,
      tokenID?: null,
      timestamp?: null,
      blockNumber?: null
    ): TokenURIUpdateEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    addManager(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTo725StoreList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToCreateERC20List(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToMetadataList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auth(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cleanPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createERC20(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeCall(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getData(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getMetaData(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissions(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensList(overrides?: CallOverrides): Promise<BigNumber>;

    hasMetaData(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: string,
      name_: string,
      symbol_: string,
      tokenFactory: string,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeployed(
      datatoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC20Deployer(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    metaDataDecryptorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    metaDataDecryptorUrl(overrides?: CallOverrides): Promise<BigNumber>;

    metaDataState(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFrom725StoreList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromCreateERC20List(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromMetadataList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeManager(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDataERC20(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetaData(
      _metaDataState: BigNumberish,
      _metaDataDecryptorUrl: string,
      _metaDataDecryptorAddress: string,
      flags: BytesLike,
      data: BytesLike,
      _metaDataHash: BytesLike,
      _metadataProofs: ERC721Template.MetaDataProofStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetaDataAndTokenURI(
      _metaDataAndTokenURI: ERC721Template.MetaDataAndTokenURIStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetaDataState(
      _metaDataState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ssContract(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addManager(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTo725StoreList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToCreateERC20List(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToMetadataList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auth(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cleanPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createERC20(
      _templateIndex: BigNumberish,
      strings: string[],
      addresses: string[],
      uints: BigNumberish[],
      bytess: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeCall(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMetaData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasMetaData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      name_: string,
      symbol_: string,
      tokenFactory: string,
      additionalERC20Deployer: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeployed(
      datatoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC20Deployer(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metaDataDecryptorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaDataDecryptorUrl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaDataState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFrom725StoreList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromCreateERC20List(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromMetadataList(
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeManager(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDataERC20(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetaData(
      _metaDataState: BigNumberish,
      _metaDataDecryptorUrl: string,
      _metaDataDecryptorAddress: string,
      flags: BytesLike,
      data: BytesLike,
      _metaDataHash: BytesLike,
      _metadataProofs: ERC721Template.MetaDataProofStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetaDataAndTokenURI(
      _metaDataAndTokenURI: ERC721Template.MetaDataAndTokenURIStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetaDataState(
      _metaDataState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ssContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
