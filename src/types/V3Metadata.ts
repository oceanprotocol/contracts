/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface V3MetadataInterface extends utils.Interface {
  contractName: "V3Metadata";
  functions: {
    "create(address,bytes,bytes)": FunctionFragment;
    "update(address,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "MetadataCreated(address,address,bytes,bytes)": EventFragment;
    "MetadataUpdated(address,address,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetadataCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdated"): EventFragment;
}

export type MetadataCreatedEvent = TypedEvent<
  [string, string, string, string],
  { dataToken: string; createdBy: string; flags: string; data: string }
>;

export type MetadataCreatedEventFilter = TypedEventFilter<MetadataCreatedEvent>;

export type MetadataUpdatedEvent = TypedEvent<
  [string, string, string, string],
  { dataToken: string; updatedBy: string; flags: string; data: string }
>;

export type MetadataUpdatedEventFilter = TypedEventFilter<MetadataUpdatedEvent>;

export interface V3Metadata extends BaseContract {
  contractName: "V3Metadata";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: V3MetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  create(
    dataToken: string,
    flags: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    dataToken: string,
    flags: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MetadataCreated(address,address,bytes,bytes)"(
      dataToken?: string | null,
      createdBy?: string | null,
      flags?: null,
      data?: null
    ): MetadataCreatedEventFilter;
    MetadataCreated(
      dataToken?: string | null,
      createdBy?: string | null,
      flags?: null,
      data?: null
    ): MetadataCreatedEventFilter;

    "MetadataUpdated(address,address,bytes,bytes)"(
      dataToken?: string | null,
      updatedBy?: string | null,
      flags?: null,
      data?: null
    ): MetadataUpdatedEventFilter;
    MetadataUpdated(
      dataToken?: string | null,
      updatedBy?: string | null,
      flags?: null,
      data?: null
    ): MetadataUpdatedEventFilter;
  };

  estimateGas: {
    create(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      dataToken: string,
      flags: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
