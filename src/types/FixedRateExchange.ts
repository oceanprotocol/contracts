/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FixedRateExchangeInterface extends utils.Interface {
  contractName: "FixedRateExchange";
  functions: {
    "buyDT(bytes32,uint256,uint256)": FunctionFragment;
    "calcBaseInGivenOutDT(bytes32,uint256)": FunctionFragment;
    "calcBaseOutGivenInDT(bytes32,uint256)": FunctionFragment;
    "collectBT(bytes32)": FunctionFragment;
    "collectDT(bytes32)": FunctionFragment;
    "collectMarketFee(bytes32)": FunctionFragment;
    "collectOceanFee(bytes32)": FunctionFragment;
    "createWithDecimals(address,address[],uint256[])": FunctionFragment;
    "generateExchangeId(address,address,address)": FunctionFragment;
    "getAllowedSwapper(bytes32)": FunctionFragment;
    "getBTSupply(bytes32)": FunctionFragment;
    "getDTSupply(bytes32)": FunctionFragment;
    "getExchange(bytes32)": FunctionFragment;
    "getExchanges()": FunctionFragment;
    "getFeesInfo(bytes32)": FunctionFragment;
    "getId()": FunctionFragment;
    "getNumberOfExchanges()": FunctionFragment;
    "getOPCFee(address)": FunctionFragment;
    "getRate(bytes32)": FunctionFragment;
    "isActive(bytes32)": FunctionFragment;
    "opcCollector()": FunctionFragment;
    "router()": FunctionFragment;
    "sellDT(bytes32,uint256,uint256)": FunctionFragment;
    "setAllowedSwapper(bytes32,address)": FunctionFragment;
    "setRate(bytes32,uint256)": FunctionFragment;
    "toggleExchangeState(bytes32)": FunctionFragment;
    "toggleMintState(bytes32,bool)": FunctionFragment;
    "updateMarketFee(bytes32,uint256)": FunctionFragment;
    "updateMarketFeeCollector(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyDT",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBaseInGivenOutDT",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBaseOutGivenInDT",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectBT",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectDT",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectMarketFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectOceanFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithDecimals",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "generateExchangeId",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedSwapper",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBTSupply",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDTSupply",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeesInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNumberOfExchanges",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOPCFee", values: [string]): string;
  encodeFunctionData(functionFragment: "getRate", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "isActive", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "opcCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellDT",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSwapper",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleExchangeState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMintState",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFeeCollector",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "buyDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcBaseInGivenOutDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBaseOutGivenInDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectBT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectOceanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateExchangeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBTSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDTSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOPCFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "opcCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleExchangeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMintState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFeeCollector",
    data: BytesLike
  ): Result;

  events: {
    "ExchangeActivated(bytes32,address)": EventFragment;
    "ExchangeAllowedSwapperChanged(bytes32,address)": EventFragment;
    "ExchangeCreated(bytes32,address,address,address,uint256)": EventFragment;
    "ExchangeDeactivated(bytes32,address)": EventFragment;
    "ExchangeMintStateChanged(bytes32,address,bool)": EventFragment;
    "ExchangeRateChanged(bytes32,address,uint256)": EventFragment;
    "MarketFeeCollected(bytes32,address,uint256)": EventFragment;
    "OceanFeeCollected(bytes32,address,uint256)": EventFragment;
    "Swapped(bytes32,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "TokenCollected(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeActivated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExchangeAllowedSwapperChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeMintStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OceanFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCollected"): EventFragment;
}

export type ExchangeActivatedEvent = TypedEvent<
  [string, string],
  { exchangeId: string; exchangeOwner: string }
>;

export type ExchangeActivatedEventFilter =
  TypedEventFilter<ExchangeActivatedEvent>;

export type ExchangeAllowedSwapperChangedEvent = TypedEvent<
  [string, string],
  { exchangeId: string; allowedSwapper: string }
>;

export type ExchangeAllowedSwapperChangedEventFilter =
  TypedEventFilter<ExchangeAllowedSwapperChangedEvent>;

export type ExchangeCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  {
    exchangeId: string;
    baseToken: string;
    datatoken: string;
    exchangeOwner: string;
    fixedRate: BigNumber;
  }
>;

export type ExchangeCreatedEventFilter = TypedEventFilter<ExchangeCreatedEvent>;

export type ExchangeDeactivatedEvent = TypedEvent<
  [string, string],
  { exchangeId: string; exchangeOwner: string }
>;

export type ExchangeDeactivatedEventFilter =
  TypedEventFilter<ExchangeDeactivatedEvent>;

export type ExchangeMintStateChangedEvent = TypedEvent<
  [string, string, boolean],
  { exchangeId: string; exchangeOwner: string; withMint: boolean }
>;

export type ExchangeMintStateChangedEventFilter =
  TypedEventFilter<ExchangeMintStateChangedEvent>;

export type ExchangeRateChangedEvent = TypedEvent<
  [string, string, BigNumber],
  { exchangeId: string; exchangeOwner: string; newRate: BigNumber }
>;

export type ExchangeRateChangedEventFilter =
  TypedEventFilter<ExchangeRateChangedEvent>;

export type MarketFeeCollectedEvent = TypedEvent<
  [string, string, BigNumber],
  { exchangeId: string; feeToken: string; feeAmount: BigNumber }
>;

export type MarketFeeCollectedEventFilter =
  TypedEventFilter<MarketFeeCollectedEvent>;

export type OceanFeeCollectedEvent = TypedEvent<
  [string, string, BigNumber],
  { exchangeId: string; feeToken: string; feeAmount: BigNumber }
>;

export type OceanFeeCollectedEventFilter =
  TypedEventFilter<OceanFeeCollectedEvent>;

export type SwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, BigNumber],
  {
    exchangeId: string;
    by: string;
    baseTokenSwappedAmount: BigNumber;
    datatokenSwappedAmount: BigNumber;
    tokenOutAddress: string;
    marketFeeAmount: BigNumber;
    oceanFeeAmount: BigNumber;
  }
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export type TokenCollectedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { exchangeId: string; to: string; token: string; amount: BigNumber }
>;

export type TokenCollectedEventFilter = TypedEventFilter<TokenCollectedEvent>;

export interface FixedRateExchange extends BaseContract {
  contractName: "FixedRateExchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedRateExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseTokenAmount: BigNumber;
        baseTokenAmountBeforeFee: BigNumber;
        oceanFeeAmount: BigNumber;
        marketFeeAmount: BigNumber;
      }
    >;

    calcBaseOutGivenInDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseTokenAmount: BigNumber;
        baseTokenAmountBeforeFee: BigNumber;
        oceanFeeAmount: BigNumber;
        marketFeeAmount: BigNumber;
      }
    >;

    collectBT(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectDT(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectMarketFee(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectOceanFee(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateExchangeId(
      baseToken: string,
      datatoken: string,
      exchangeOwner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { allowedSwapper: string }>;

    getBTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    getDTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        exchangeOwner: string;
        datatoken: string;
        dtDecimals: BigNumber;
        baseToken: string;
        btDecimals: BigNumber;
        fixedRate: BigNumber;
        active: boolean;
        dtSupply: BigNumber;
        btSupply: BigNumber;
        dtBalance: BigNumber;
        btBalance: BigNumber;
        withMint: boolean;
      }
    >;

    getExchanges(overrides?: CallOverrides): Promise<[string[]]>;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        marketFee: BigNumber;
        marketFeeCollector: string;
        opcFee: BigNumber;
        marketFeeAvailable: BigNumber;
        oceanFeeAvailable: BigNumber;
      }
    >;

    getId(overrides?: CallOverrides): Promise<[number]>;

    getNumberOfExchanges(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOPCFee(
      baseTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRate(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    opcCollector(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRate(
      exchangeId: BytesLike,
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleExchangeState(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleMintState(
      exchangeId: BytesLike,
      withMint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    maxBaseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcBaseInGivenOutDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseTokenAmount: BigNumber;
      baseTokenAmountBeforeFee: BigNumber;
      oceanFeeAmount: BigNumber;
      marketFeeAmount: BigNumber;
    }
  >;

  calcBaseOutGivenInDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseTokenAmount: BigNumber;
      baseTokenAmountBeforeFee: BigNumber;
      oceanFeeAmount: BigNumber;
      marketFeeAmount: BigNumber;
    }
  >;

  collectBT(
    exchangeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectDT(
    exchangeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectMarketFee(
    exchangeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectOceanFee(
    exchangeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createWithDecimals(
    datatoken: string,
    addresses: string[],
    uints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateExchangeId(
    baseToken: string,
    datatoken: string,
    exchangeOwner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllowedSwapper(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getBTSupply(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDTSupply(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExchange(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      exchangeOwner: string;
      datatoken: string;
      dtDecimals: BigNumber;
      baseToken: string;
      btDecimals: BigNumber;
      fixedRate: BigNumber;
      active: boolean;
      dtSupply: BigNumber;
      btSupply: BigNumber;
      dtBalance: BigNumber;
      btBalance: BigNumber;
      withMint: boolean;
    }
  >;

  getExchanges(overrides?: CallOverrides): Promise<string[]>;

  getFeesInfo(
    exchangeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      marketFee: BigNumber;
      marketFeeCollector: string;
      opcFee: BigNumber;
      marketFeeAvailable: BigNumber;
      oceanFeeAvailable: BigNumber;
    }
  >;

  getId(overrides?: CallOverrides): Promise<number>;

  getNumberOfExchanges(overrides?: CallOverrides): Promise<BigNumber>;

  getOPCFee(
    baseTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRate(exchangeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  isActive(exchangeId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  opcCollector(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  sellDT(
    exchangeId: BytesLike,
    datatokenAmount: BigNumberish,
    minBaseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedSwapper(
    exchangeId: BytesLike,
    newAllowedSwapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRate(
    exchangeId: BytesLike,
    newRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleExchangeState(
    exchangeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleMintState(
    exchangeId: BytesLike,
    withMint: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketFee(
    exchangeId: BytesLike,
    _newMarketFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketFeeCollector(
    exchangeId: BytesLike,
    _newMarketCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseTokenAmount: BigNumber;
        baseTokenAmountBeforeFee: BigNumber;
        oceanFeeAmount: BigNumber;
        marketFeeAmount: BigNumber;
      }
    >;

    calcBaseOutGivenInDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseTokenAmount: BigNumber;
        baseTokenAmountBeforeFee: BigNumber;
        oceanFeeAmount: BigNumber;
        marketFeeAmount: BigNumber;
      }
    >;

    collectBT(exchangeId: BytesLike, overrides?: CallOverrides): Promise<void>;

    collectDT(exchangeId: BytesLike, overrides?: CallOverrides): Promise<void>;

    collectMarketFee(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    collectOceanFee(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    generateExchangeId(
      baseToken: string,
      datatoken: string,
      exchangeOwner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getBTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        exchangeOwner: string;
        datatoken: string;
        dtDecimals: BigNumber;
        baseToken: string;
        btDecimals: BigNumber;
        fixedRate: BigNumber;
        active: boolean;
        dtSupply: BigNumber;
        btSupply: BigNumber;
        dtBalance: BigNumber;
        btBalance: BigNumber;
        withMint: boolean;
      }
    >;

    getExchanges(overrides?: CallOverrides): Promise<string[]>;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        marketFee: BigNumber;
        marketFeeCollector: string;
        opcFee: BigNumber;
        marketFeeAvailable: BigNumber;
        oceanFeeAvailable: BigNumber;
      }
    >;

    getId(overrides?: CallOverrides): Promise<number>;

    getNumberOfExchanges(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(
      baseTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRate(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    opcCollector(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRate(
      exchangeId: BytesLike,
      newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleExchangeState(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleMintState(
      exchangeId: BytesLike,
      withMint: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeActivated(bytes32,address)"(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null
    ): ExchangeActivatedEventFilter;
    ExchangeActivated(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null
    ): ExchangeActivatedEventFilter;

    "ExchangeAllowedSwapperChanged(bytes32,address)"(
      exchangeId?: BytesLike | null,
      allowedSwapper?: string | null
    ): ExchangeAllowedSwapperChangedEventFilter;
    ExchangeAllowedSwapperChanged(
      exchangeId?: BytesLike | null,
      allowedSwapper?: string | null
    ): ExchangeAllowedSwapperChangedEventFilter;

    "ExchangeCreated(bytes32,address,address,address,uint256)"(
      exchangeId?: BytesLike | null,
      baseToken?: string | null,
      datatoken?: string | null,
      exchangeOwner?: null,
      fixedRate?: null
    ): ExchangeCreatedEventFilter;
    ExchangeCreated(
      exchangeId?: BytesLike | null,
      baseToken?: string | null,
      datatoken?: string | null,
      exchangeOwner?: null,
      fixedRate?: null
    ): ExchangeCreatedEventFilter;

    "ExchangeDeactivated(bytes32,address)"(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null
    ): ExchangeDeactivatedEventFilter;
    ExchangeDeactivated(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null
    ): ExchangeDeactivatedEventFilter;

    "ExchangeMintStateChanged(bytes32,address,bool)"(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null,
      withMint?: null
    ): ExchangeMintStateChangedEventFilter;
    ExchangeMintStateChanged(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null,
      withMint?: null
    ): ExchangeMintStateChangedEventFilter;

    "ExchangeRateChanged(bytes32,address,uint256)"(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null,
      newRate?: null
    ): ExchangeRateChangedEventFilter;
    ExchangeRateChanged(
      exchangeId?: BytesLike | null,
      exchangeOwner?: string | null,
      newRate?: null
    ): ExchangeRateChangedEventFilter;

    "MarketFeeCollected(bytes32,address,uint256)"(
      exchangeId?: BytesLike | null,
      feeToken?: string | null,
      feeAmount?: null
    ): MarketFeeCollectedEventFilter;
    MarketFeeCollected(
      exchangeId?: BytesLike | null,
      feeToken?: string | null,
      feeAmount?: null
    ): MarketFeeCollectedEventFilter;

    "OceanFeeCollected(bytes32,address,uint256)"(
      exchangeId?: BytesLike | null,
      feeToken?: string | null,
      feeAmount?: null
    ): OceanFeeCollectedEventFilter;
    OceanFeeCollected(
      exchangeId?: BytesLike | null,
      feeToken?: string | null,
      feeAmount?: null
    ): OceanFeeCollectedEventFilter;

    "Swapped(bytes32,address,uint256,uint256,address,uint256,uint256)"(
      exchangeId?: BytesLike | null,
      by?: string | null,
      baseTokenSwappedAmount?: null,
      datatokenSwappedAmount?: null,
      tokenOutAddress?: null,
      marketFeeAmount?: null,
      oceanFeeAmount?: null
    ): SwappedEventFilter;
    Swapped(
      exchangeId?: BytesLike | null,
      by?: string | null,
      baseTokenSwappedAmount?: null,
      datatokenSwappedAmount?: null,
      tokenOutAddress?: null,
      marketFeeAmount?: null,
      oceanFeeAmount?: null
    ): SwappedEventFilter;

    "TokenCollected(bytes32,address,address,uint256)"(
      exchangeId?: BytesLike | null,
      to?: string | null,
      token?: string | null,
      amount?: null
    ): TokenCollectedEventFilter;
    TokenCollected(
      exchangeId?: BytesLike | null,
      to?: string | null,
      token?: string | null,
      amount?: null
    ): TokenCollectedEventFilter;
  };

  estimateGas: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBaseOutGivenInDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectBT(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectDT(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectMarketFee(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectOceanFee(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateExchangeId(
      baseToken: string,
      datatoken: string,
      exchangeOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchanges(overrides?: CallOverrides): Promise<BigNumber>;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfExchanges(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(
      baseTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRate(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    opcCollector(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRate(
      exchangeId: BytesLike,
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleExchangeState(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleMintState(
      exchangeId: BytesLike,
      withMint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      maxBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcBaseInGivenOutDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBaseOutGivenInDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectBT(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectDT(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectMarketFee(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectOceanFee(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createWithDecimals(
      datatoken: string,
      addresses: string[],
      uints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateExchangeId(
      baseToken: string,
      datatoken: string,
      exchangeOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedSwapper(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDTSupply(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchanges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeesInfo(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfExchanges(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOPCFee(
      baseTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRate(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(
      exchangeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    opcCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellDT(
      exchangeId: BytesLike,
      datatokenAmount: BigNumberish,
      minBaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSwapper(
      exchangeId: BytesLike,
      newAllowedSwapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRate(
      exchangeId: BytesLike,
      newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleExchangeState(
      exchangeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleMintState(
      exchangeId: BytesLike,
      withMint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketFee(
      exchangeId: BytesLike,
      _newMarketFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketFeeCollector(
      exchangeId: BytesLike,
      _newMarketCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
