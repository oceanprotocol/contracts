/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IPoolInterface extends utils.Interface {
  contractName: "IPool";
  functions: {
    "exitswapPoolAmountIn(uint256,uint256)": FunctionFragment;
    "getAmountInExactOut(address,address,uint256,uint256)": FunctionFragment;
    "getAmountOutExactIn(address,address,uint256,uint256)": FunctionFragment;
    "getBaseTokenAddress()": FunctionFragment;
    "getController()": FunctionFragment;
    "getDatatokenAddress()": FunctionFragment;
    "getId()": FunctionFragment;
    "joinswapExternAmountIn(uint256,uint256)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "setup(address,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "swapExactAmountIn(address[3],uint256[4])": FunctionFragment;
    "swapExactAmountOut(address[3],uint256[4])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountInExactOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutExactIn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDatatokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountIn",
    values: [
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountOut",
    values: [
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountInExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDatatokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountOut",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPool extends BaseContract {
  contractName: "IPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountIn: BigNumber }>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountOut: BigNumber }>;

    getBaseTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    getDatatokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokennWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  exitswapPoolAmountIn(
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountInExactOut(
    tokenIn: string,
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    _swapMarketFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOutExactIn(
    tokenIn: string,
    tokenOut: string,
    tokenAmountIn: BigNumberish,
    _swapMarketFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokenAddress(overrides?: CallOverrides): Promise<string>;

  getController(overrides?: CallOverrides): Promise<string>;

  getDatatokenAddress(overrides?: CallOverrides): Promise<string>;

  getId(overrides?: CallOverrides): Promise<number>;

  joinswapExternAmountIn(
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setup(
    datatokenAddress: string,
    datatokenAmount: BigNumberish,
    datatokennWeight: BigNumberish,
    baseTokenAddress: string,
    baseTokenAmount: BigNumberish,
    baseTokenWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountIn(
    tokenInOutMarket: [string, string, string],
    amountsInOutMaxFee: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountOut(
    tokenInOutMarket: [string, string, string],
    amountsInOutMaxFee: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenAddress(overrides?: CallOverrides): Promise<string>;

    getController(overrides?: CallOverrides): Promise<string>;

    getDatatokenAddress(overrides?: CallOverrides): Promise<string>;

    getId(overrides?: CallOverrides): Promise<number>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSwapFee(swapFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokennWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getDatatokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokennWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDatatokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokennWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
