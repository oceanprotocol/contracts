/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BPoolInterface extends utils.Interface {
  contractName: "BPool";
  functions: {
    "BONE()": FunctionFragment;
    "BPOW_PRECISION()": FunctionFragment;
    "EXIT_FEE()": FunctionFragment;
    "INIT_POOL_SUPPLY()": FunctionFragment;
    "MAX_BOUND_TOKENS()": FunctionFragment;
    "MAX_BPOW_BASE()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MAX_IN_RATIO()": FunctionFragment;
    "MAX_OUT_RATIO()": FunctionFragment;
    "MAX_TOTAL_WEIGHT()": FunctionFragment;
    "MAX_WEIGHT()": FunctionFragment;
    "MIN_BALANCE()": FunctionFragment;
    "MIN_BOUND_TOKENS()": FunctionFragment;
    "MIN_BPOW_BASE()": FunctionFragment;
    "MIN_FEE()": FunctionFragment;
    "MIN_WEIGHT()": FunctionFragment;
    "_opcCollector()": FunctionFragment;
    "_publishMarketCollector()": FunctionFragment;
    "_swapPublishMarketFee()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calcPoolInSingleOut(address,uint256)": FunctionFragment;
    "calcPoolOutSingleIn(address,uint256)": FunctionFragment;
    "calcSingleInPoolOut(address,uint256)": FunctionFragment;
    "calcSingleOutPoolIn(address,uint256)": FunctionFragment;
    "collectMarketFee()": FunctionFragment;
    "collectOPC()": FunctionFragment;
    "communityFees(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "exitswapPoolAmountIn(uint256,uint256)": FunctionFragment;
    "getAmountInExactOut(address,address,uint256,uint256)": FunctionFragment;
    "getAmountOutExactIn(address,address,uint256,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getBaseTokenAddress()": FunctionFragment;
    "getController()": FunctionFragment;
    "getCurrentMarketFees()": FunctionFragment;
    "getCurrentOPCFees()": FunctionFragment;
    "getCurrentTokens()": FunctionFragment;
    "getDatatokenAddress()": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getFinalTokens()": FunctionFragment;
    "getId()": FunctionFragment;
    "getMarketFee()": FunctionFragment;
    "getNormalizedWeight(address)": FunctionFragment;
    "getNumTokens()": FunctionFragment;
    "getOPCFee()": FunctionFragment;
    "getSpotPrice(address,address,uint256)": FunctionFragment;
    "getSwapFee()": FunctionFragment;
    "getTotalDenormalizedWeight()": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256[],bool,bool,address[2],address[2])": FunctionFragment;
    "isBound(address)": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isPublicSwap()": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "publishMarketFees(address)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "setup(address,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "swapExactAmountIn(address[3],uint256[4])": FunctionFragment;
    "swapExactAmountOut(address[3],uint256[4])": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateMarketFeeCollector(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BPOW_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXIT_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "INIT_POOL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_IN_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OUT_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BOUND_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BPOW_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_opcCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_publishMarketCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_swapPublishMarketFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcPoolInSingleOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolOutSingleIn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleInPoolOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleOutPoolIn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectMarketFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectOPC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityFees",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountInExactOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutExactIn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMarketFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentOPCFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDatatokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMarketFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOPCFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDenormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish[],
      boolean,
      boolean,
      [string, string],
      [string, string]
    ]
  ): string;
  encodeFunctionData(functionFragment: "isBound", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishMarketFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountIn",
    values: [
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountOut",
    values: [
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFeeCollector",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BPOW_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXIT_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INIT_POOL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_IN_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OUT_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BOUND_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BPOW_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_WEIGHT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_opcCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_publishMarketCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_swapPublishMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolInSingleOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolOutSingleIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleInPoolOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleOutPoolIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectOPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "communityFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountInExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentOPCFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDatatokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOPCFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFeeCollector",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LOG_BPT(uint256)": EventFragment;
    "LOG_BPT_SS(uint256)": EventFragment;
    "LOG_CALL(bytes4,address,uint256,bytes)": EventFragment;
    "LOG_EXIT(address,address,uint256,uint256)": EventFragment;
    "LOG_JOIN(address,address,uint256,uint256)": EventFragment;
    "LOG_SETUP(address,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "LOG_SWAP(address,address,address,uint256,uint256,uint256)": EventFragment;
    "MarketCollectorChanged(address,address)": EventFragment;
    "MarketFees(address,address,uint256)": EventFragment;
    "OPCFee(address,address,address,uint256)": EventFragment;
    "PublishMarketFee(address,address,address,uint256)": EventFragment;
    "SWAP_FEES(uint256,uint256,uint256,address)": EventFragment;
    "SwapFeeChanged(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_BPT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_BPT_SS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_CALL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_EXIT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_JOIN"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_SETUP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_SWAP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCollectorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OPCFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublishMarketFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SWAP_FEES"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { src: string; dst: string; amt: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type LOG_BPTEvent = TypedEvent<[BigNumber], { bptAmount: BigNumber }>;

export type LOG_BPTEventFilter = TypedEventFilter<LOG_BPTEvent>;

export type LOG_BPT_SSEvent = TypedEvent<[BigNumber], { bptAmount: BigNumber }>;

export type LOG_BPT_SSEventFilter = TypedEventFilter<LOG_BPT_SSEvent>;

export type LOG_CALLEvent = TypedEvent<
  [string, string, BigNumber, string],
  { sig: string; caller: string; timestamp: BigNumber; data: string }
>;

export type LOG_CALLEventFilter = TypedEventFilter<LOG_CALLEvent>;

export type LOG_EXITEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    caller: string;
    tokenOut: string;
    tokenAmountOut: BigNumber;
    timestamp: BigNumber;
  }
>;

export type LOG_EXITEventFilter = TypedEventFilter<LOG_EXITEvent>;

export type LOG_JOINEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    caller: string;
    tokenIn: string;
    tokenAmountIn: BigNumber;
    timestamp: BigNumber;
  }
>;

export type LOG_JOINEventFilter = TypedEventFilter<LOG_JOINEvent>;

export type LOG_SETUPEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, BigNumber],
  {
    caller: string;
    baseToken: string;
    baseTokenAmountIn: BigNumber;
    baseTokenWeight: BigNumber;
    datatoken: string;
    datatokenAmountIn: BigNumber;
    datatokenWeight: BigNumber;
  }
>;

export type LOG_SETUPEventFilter = TypedEventFilter<LOG_SETUPEvent>;

export type LOG_SWAPEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    tokenIn: string;
    tokenOut: string;
    tokenAmountIn: BigNumber;
    tokenAmountOut: BigNumber;
    timestamp: BigNumber;
  }
>;

export type LOG_SWAPEventFilter = TypedEventFilter<LOG_SWAPEvent>;

export type MarketCollectorChangedEvent = TypedEvent<
  [string, string],
  { caller: string; newMarketCollector: string }
>;

export type MarketCollectorChangedEventFilter =
  TypedEventFilter<MarketCollectorChangedEvent>;

export type MarketFeesEvent = TypedEvent<
  [string, string, BigNumber],
  { to: string; token: string; amount: BigNumber }
>;

export type MarketFeesEventFilter = TypedEventFilter<MarketFeesEvent>;

export type OPCFeeEvent = TypedEvent<
  [string, string, string, BigNumber],
  { caller: string; OPCWallet: string; token: string; amount: BigNumber }
>;

export type OPCFeeEventFilter = TypedEventFilter<OPCFeeEvent>;

export type PublishMarketFeeEvent = TypedEvent<
  [string, string, string, BigNumber],
  { caller: string; marketAddress: string; token: string; amount: BigNumber }
>;

export type PublishMarketFeeEventFilter =
  TypedEventFilter<PublishMarketFeeEvent>;

export type SWAP_FEESEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    swapFeeAmount: BigNumber;
    oceanFeeAmount: BigNumber;
    marketFeeAmount: BigNumber;
    tokenFees: string;
  }
>;

export type SWAP_FEESEventFilter = TypedEventFilter<SWAP_FEESEvent>;

export type SwapFeeChangedEvent = TypedEvent<
  [string, BigNumber],
  { caller: string; amount: BigNumber }
>;

export type SwapFeeChangedEventFilter = TypedEventFilter<SwapFeeChangedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { src: string; dst: string; amt: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface BPool extends BaseContract {
  contractName: "BPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXIT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _opcCollector(overrides?: CallOverrides): Promise<[string]>;

    _publishMarketCollector(overrides?: CallOverrides): Promise<[string]>;

    _swapPublishMarketFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(whom: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calcPoolInSingleOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolAmountIn: BigNumber }>;

    calcPoolOutSingleIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolAmountOut: BigNumber }>;

    calcSingleInPoolOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountIn: BigNumber }>;

    calcSingleOutPoolIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountOut: BigNumber }>;

    collectMarketFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectOPC(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    communityFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountIn: BigNumber }>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountOut: BigNumber }>;

    getBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    getCurrentMarketFees(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getCurrentOPCFees(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getCurrentTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getDatatokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFinalTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getId(overrides?: CallOverrides): Promise<[number]>;

    getMarketFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOPCFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spotPrice: BigNumber }>;

    getSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      controller: string,
      factory: string,
      swapFees: BigNumberish[],
      publicSwap: boolean,
      finalized: boolean,
      tokens: [string, string],
      feeCollectors: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBound(t: string, overrides?: CallOverrides): Promise<[boolean]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isPublicSwap(overrides?: CallOverrides): Promise<[boolean]>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    publishMarketFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokenWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketFeeCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BONE(overrides?: CallOverrides): Promise<BigNumber>;

  BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  _opcCollector(overrides?: CallOverrides): Promise<string>;

  _publishMarketCollector(overrides?: CallOverrides): Promise<string>;

  _swapPublishMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    src: string,
    dst: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcPoolInSingleOut(
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPoolOutSingleIn(
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleInPoolOut(
    tokenIn: string,
    poolAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleOutPoolIn(
    tokenOut: string,
    poolAmountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectMarketFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectOPC(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  communityFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountInExactOut(
    tokenIn: string,
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    _swapMarketFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOutExactIn(
    tokenIn: string,
    tokenOut: string,
    tokenAmountIn: BigNumberish,
    _swapMarketFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getBaseTokenAddress(overrides?: CallOverrides): Promise<string>;

  getController(overrides?: CallOverrides): Promise<string>;

  getCurrentMarketFees(
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getCurrentOPCFees(
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

  getDatatokenAddress(overrides?: CallOverrides): Promise<string>;

  getDenormalizedWeight(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

  getId(overrides?: CallOverrides): Promise<number>;

  getMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

  getNormalizedWeight(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getOPCFee(overrides?: CallOverrides): Promise<BigNumber>;

  getSpotPrice(
    tokenIn: string,
    tokenOut: string,
    _swapMarketFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  increaseApproval(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    controller: string,
    factory: string,
    swapFees: BigNumberish[],
    publicSwap: boolean,
    finalized: boolean,
    tokens: [string, string],
    feeCollectors: [string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

  joinPool(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  publishMarketFees(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setSwapFee(
    swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setup(
    datatokenAddress: string,
    datatokenAmount: BigNumberish,
    datatokenWeight: BigNumberish,
    baseTokenAddress: string,
    baseTokenAmount: BigNumberish,
    baseTokenWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountIn(
    tokenInOutMarket: [string, string, string],
    amountsInOutMaxFee: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountOut(
    tokenInOutMarket: [string, string, string],
    amountsInOutMaxFee: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketFeeCollector(
    _newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BONE(overrides?: CallOverrides): Promise<BigNumber>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    _opcCollector(overrides?: CallOverrides): Promise<string>;

    _publishMarketCollector(overrides?: CallOverrides): Promise<string>;

    _swapPublishMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcPoolInSingleOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutSingleIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInPoolOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutPoolIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectMarketFee(overrides?: CallOverrides): Promise<void>;

    collectOPC(overrides?: CallOverrides): Promise<void>;

    communityFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenAddress(overrides?: CallOverrides): Promise<string>;

    getController(overrides?: CallOverrides): Promise<string>;

    getCurrentMarketFees(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getCurrentOPCFees(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

    getDatatokenAddress(overrides?: CallOverrides): Promise<string>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

    getId(overrides?: CallOverrides): Promise<number>;

    getMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    increaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      controller: string,
      factory: string,
      swapFees: BigNumberish[],
      publicSwap: boolean,
      finalized: boolean,
      tokens: [string, string],
      feeCollectors: [string, string],
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    publishMarketFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSwapFee(swapFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokenWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateMarketFeeCollector(
      _newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      src?: string | null,
      dst?: string | null,
      amt?: null
    ): ApprovalEventFilter;
    Approval(
      src?: string | null,
      dst?: string | null,
      amt?: null
    ): ApprovalEventFilter;

    "LOG_BPT(uint256)"(bptAmount?: null): LOG_BPTEventFilter;
    LOG_BPT(bptAmount?: null): LOG_BPTEventFilter;

    "LOG_BPT_SS(uint256)"(bptAmount?: null): LOG_BPT_SSEventFilter;
    LOG_BPT_SS(bptAmount?: null): LOG_BPT_SSEventFilter;

    "LOG_CALL(bytes4,address,uint256,bytes)"(
      sig?: BytesLike | null,
      caller?: string | null,
      timestamp?: null,
      data?: null
    ): LOG_CALLEventFilter;
    LOG_CALL(
      sig?: BytesLike | null,
      caller?: string | null,
      timestamp?: null,
      data?: null
    ): LOG_CALLEventFilter;

    "LOG_EXIT(address,address,uint256,uint256)"(
      caller?: string | null,
      tokenOut?: string | null,
      tokenAmountOut?: null,
      timestamp?: null
    ): LOG_EXITEventFilter;
    LOG_EXIT(
      caller?: string | null,
      tokenOut?: string | null,
      tokenAmountOut?: null,
      timestamp?: null
    ): LOG_EXITEventFilter;

    "LOG_JOIN(address,address,uint256,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      tokenAmountIn?: null,
      timestamp?: null
    ): LOG_JOINEventFilter;
    LOG_JOIN(
      caller?: string | null,
      tokenIn?: string | null,
      tokenAmountIn?: null,
      timestamp?: null
    ): LOG_JOINEventFilter;

    "LOG_SETUP(address,address,uint256,uint256,address,uint256,uint256)"(
      caller?: string | null,
      baseToken?: string | null,
      baseTokenAmountIn?: null,
      baseTokenWeight?: null,
      datatoken?: string | null,
      datatokenAmountIn?: null,
      datatokenWeight?: null
    ): LOG_SETUPEventFilter;
    LOG_SETUP(
      caller?: string | null,
      baseToken?: string | null,
      baseTokenAmountIn?: null,
      baseTokenWeight?: null,
      datatoken?: string | null,
      datatokenAmountIn?: null,
      datatokenWeight?: null
    ): LOG_SETUPEventFilter;

    "LOG_SWAP(address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      tokenAmountIn?: null,
      tokenAmountOut?: null,
      timestamp?: null
    ): LOG_SWAPEventFilter;
    LOG_SWAP(
      caller?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      tokenAmountIn?: null,
      tokenAmountOut?: null,
      timestamp?: null
    ): LOG_SWAPEventFilter;

    "MarketCollectorChanged(address,address)"(
      caller?: null,
      newMarketCollector?: null
    ): MarketCollectorChangedEventFilter;
    MarketCollectorChanged(
      caller?: null,
      newMarketCollector?: null
    ): MarketCollectorChangedEventFilter;

    "MarketFees(address,address,uint256)"(
      to?: null,
      token?: null,
      amount?: null
    ): MarketFeesEventFilter;
    MarketFees(to?: null, token?: null, amount?: null): MarketFeesEventFilter;

    "OPCFee(address,address,address,uint256)"(
      caller?: null,
      OPCWallet?: null,
      token?: null,
      amount?: null
    ): OPCFeeEventFilter;
    OPCFee(
      caller?: null,
      OPCWallet?: null,
      token?: null,
      amount?: null
    ): OPCFeeEventFilter;

    "PublishMarketFee(address,address,address,uint256)"(
      caller?: null,
      marketAddress?: null,
      token?: null,
      amount?: null
    ): PublishMarketFeeEventFilter;
    PublishMarketFee(
      caller?: null,
      marketAddress?: null,
      token?: null,
      amount?: null
    ): PublishMarketFeeEventFilter;

    "SWAP_FEES(uint256,uint256,uint256,address)"(
      swapFeeAmount?: null,
      oceanFeeAmount?: null,
      marketFeeAmount?: null,
      tokenFees?: null
    ): SWAP_FEESEventFilter;
    SWAP_FEES(
      swapFeeAmount?: null,
      oceanFeeAmount?: null,
      marketFeeAmount?: null,
      tokenFees?: null
    ): SWAP_FEESEventFilter;

    "SwapFeeChanged(address,uint256)"(
      caller?: null,
      amount?: null
    ): SwapFeeChangedEventFilter;
    SwapFeeChanged(caller?: null, amount?: null): SwapFeeChangedEventFilter;

    "Transfer(address,address,uint256)"(
      src?: string | null,
      dst?: string | null,
      amt?: null
    ): TransferEventFilter;
    Transfer(
      src?: string | null,
      dst?: string | null,
      amt?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    BONE(overrides?: CallOverrides): Promise<BigNumber>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    _opcCollector(overrides?: CallOverrides): Promise<BigNumber>;

    _publishMarketCollector(overrides?: CallOverrides): Promise<BigNumber>;

    _swapPublishMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(whom: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcPoolInSingleOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutSingleIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInPoolOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutPoolIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectMarketFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectOPC(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    communityFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentMarketFees(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentOPCFees(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDatatokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketFee(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getOPCFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    increaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      controller: string,
      factory: string,
      swapFees: BigNumberish[],
      publicSwap: boolean,
      finalized: boolean,
      tokens: [string, string],
      feeCollectors: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBound(t: string, overrides?: CallOverrides): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isPublicSwap(overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    publishMarketFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokenWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketFeeCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BPOW_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXIT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INIT_POOL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOUND_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPOW_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_IN_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OUT_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOTAL_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BALANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BOUND_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BPOW_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _opcCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _publishMarketCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _swapPublishMarketFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      whom: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolInSingleOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolOutSingleIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleInPoolOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleOutPoolIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectMarketFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectOPC(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    communityFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountInExactOut(
      tokenIn: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutExactIn(
      tokenIn: string,
      tokenOut: string,
      tokenAmountIn: BigNumberish,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentMarketFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentOPCFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDatatokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPCFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      _swapMarketFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseApproval(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      controller: string,
      factory: string,
      swapFees: BigNumberish[],
      publicSwap: boolean,
      finalized: boolean,
      tokens: [string, string],
      feeCollectors: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBound(
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPublicSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishMarketFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      datatokenAddress: string,
      datatokenAmount: BigNumberish,
      datatokenWeight: BigNumberish,
      baseTokenAddress: string,
      baseTokenAmount: BigNumberish,
      baseTokenWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountIn(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountOut(
      tokenInOutMarket: [string, string, string],
      amountsInOutMaxFee: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketFeeCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
